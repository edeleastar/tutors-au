{
  "properties": {
    "slack": "https://wit-hdip-comp-sci.slack.com/messages/C84S2LQSC/",
    "parent": "https://wit-hdip-comp-sci-2019.github.io/",
    "credits": "Eamonn de Leastar, WIT Computing",
    "ects": "2½",
    "faPanelicon": "fas fa-code-branch",
    "icon": "code-branch",
    "faColour": "#ffd600",
    "ignore": [
      "topic--assignments",
      "topic-06-sessions"
    ]
  },
  "title": " ICT Skills 1 ",
  "type": "course",
  "summary": "javascript · node · express · git · github · glitch",
  "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//course.png",
  "id": "repo",
  "hide": false,
  "los": [
    {
      "title": "Assignments ",
      "type": "topic",
      "summary": "Assignment specification for the module",
      "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic--assignments/unit/talk-2-gym-v2-spec/assignment.png",
      "id": "topic--assignments",
      "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic--assignments",
      "hide": true,
      "los": [
        {
          "title": "Assignment ",
          "type": "unit",
          "summary": "Assignment",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic--assignments/unit/talk-2-gym-v2-spec/assignment.png",
          "id": "unit",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic--assignments/",
          "hide": false,
          "los": [
            {
              "title": "ICTSkills Assignment : PlayGymWebJS ",
              "type": "talk",
              "summary": "Specification of the Assignment for the ICT Skills Module",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic--assignments/unit/talk-2-gym-v2-spec/assignment.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic--assignments/unit/talk-2-gym-v2-spec/4smVpxD6zxc",
              "id": "talk-2-gym-v2-spec",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic--assignments/unit/talk-2-gym-v2-spec/assignment.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic--assignments/unit/talk-2-gym-v2-spec/assignment.pdf"
            }
          ]
        }
      ]
    },
    {
      "title": "0: Overview ",
      "type": "topic",
      "summary": "Overview of the module + introduction to the Glitch platform",
      "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/topic.png",
      "id": "topic-00-module-overview",
      "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview",
      "hide": false,
      "los": [
        {
          "title": "Module Overview ",
          "type": "unit",
          "summary": "Module Overview",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-0/talk-1-overview/review.png",
          "id": "unit-0",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/",
          "hide": false,
          "los": [
            {
              "properties": {
                "panelicon": "newspaper"
              },
              "title": "Module Overview ",
              "type": "talk",
              "summary": "Overview of the modules topics",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-0/talk-1-overview/review.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-0/talk-1-overview/TF4NE90hRoo",
              "id": "talk-1-overview",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-0/talk-1-overview/review.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-0/talk-1-overview/review.pdf"
            }
          ]
        },
        {
          "title": "Introducing Glitch ",
          "type": "unit",
          "summary": "",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/talk-a-glitch-intro/glitch.png",
          "id": "unit-1",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/",
          "hide": false,
          "los": [
            {
              "title": "Introducing Glitch ",
              "type": "talk",
              "summary": "What is is, what role it plays, why was it built.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/talk-a-glitch-intro/glitch.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/talk-a-glitch-intro/SHSs4vzk05U",
              "id": "talk-a-glitch-intro",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/talk-a-glitch-intro/glitch.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/talk-a-glitch-intro/glitch.pdf"
            },
            {
              "title": "Glitch Tour ",
              "type": "talk",
              "summary": "A look at at the components of a glitch project. Also types of project will we build?",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/talk-b-glitch-tour/glitch-tour.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/talk-b-glitch-tour/h76FPkIO2HU",
              "id": "talk-b-glitch-tour",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/talk-b-glitch-tour/glitch-tour.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/talk-b-glitch-tour/glitch-tour.pdf"
            },
            {
              "title": "Lab-1 Glitch Intro",
              "type": "lab",
              "summary": "Create, modify and view your first Glitch project.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/book-a-glitch-intro/img/main.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/book-a-glitch-intro/DZrMAjxNxOY",
              "id": "book-a-glitch-intro",
              "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/book-a-glitch-intro",
              "hide": false,
              "los": [
                {
                  "title": "# Objectives",
                  "shortTitle": "Lab-1 Glitch Intro",
                  "contentMd": "# Objectives\n\nCreate, modify and view your first Glitch project.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/book-a-glitch-intro/Lab-1 Glitch Intro"
                },
                {
                  "title": "# Gomix Setup",
                  "shortTitle": "01",
                  "contentMd": "# Gomix Setup\n\nIf you do not have a github account, create one now:\n\n- <https://github.com>\n\nNow sign up for the gomix service:\n\n- <https://glitch.com>\n\nIf you sign in - with your github account - Github will ask you to authorize the application:\n\n![](img/01.png)\n\nYou should then proceed to a dashboard. In the top left, select 'New Project'\n\n![](img/01x.png)\n\nSelect 'Hello Express' from the menu above.\n\n![](img/02x.png)\n\nPress the `Show` button and it will reveal a live version of of the app you have just created:\n\n![](img/03x.png)\n\nSelect show in a new window:\n\n![](img/04x.png)\n\nYou can interact with this repo by entering text in the Dreams box. Also, as this app is live in the cloud - and this is your own copy of the app - you can share this link with others. \n\nDo this now with someone also doing the lab - perhaps you can pair up with someone via the slack channel?\n\nVerify that you each see different lists depending on what has been entered. Enter some 'dreams' into you someone else's app.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/book-a-glitch-intro/01"
                },
                {
                  "title": "# Project Structure and Editing",
                  "shortTitle": "02",
                  "contentMd": "# Project Structure and Editing\n\nBack in the `source` view, look at the project structure in more detail. Click on the `Markdown` button on the top - this will switch to edit mode:\n\n![](img/05x.png)\n\nYou can edit this file now - it is documentation on your new app. Toggle the markdown button to switch back to preview mode.\n\nSelect each of the files in turn and have a look at the contents. The css and html content will be familiar, but js will require some javascript knowledge we have yet to develop.\n\nAny changes we make here will be directly published live to the cloud. For instance, open `index.html` and locate the following code:\n\n~~~html\n<main>\n  <p class=\"bold\">Oh hi,</p>\n  <p>Tell me your hopes and dreams:</p>\n  <form>\n    <input type=\"text\" maxlength=\"100\" placeholder=\"Dreams!\">\n    <button type=\"submit\">Submit</button>\n  </form>\n  <section class=\"dreams\">\n    <ul id=\"dreams\">\n    </ul>\n  </section>\n</main>\n~~~\n\nMake some changes to the text, eg:\n\n~~~html\n<p class=\"bold\">howdy</p>\n<p>Tell me your plans for the weekend:</p>\n~~~\n\nVerify that the changed text appears - both for you anyone you have shared this app with.\n\nLooking at `client.js`, locate and modify some of the initial bullet items:\n\n~~~JavaScript\n// our default array of dreams\nconst dreams = [\n  'Find and count some sheep',\n  'Climb a really tall mountain',\n  'Wash the dishes'\n];\n~~~\n\nBefore making changes to this data, turn on logging first by pressing the `Logs` button.\n\n![](img/06x.png)\n\nThis has reconfigured the view so we can see a new panel along the end of the browser.\n\nNow also make changes to `server.js`, you will see activity in this new panel.\n\n![](img/08x.png)\n\nIn particular, you will see errors as you type - but if you complete a modification successfully, then the errors will be replaced with a standard `app listening` message.\n\n![](img/09x.png)\n\nExperiment with making small changes in `server.js` now (it doesn't matter what you enter) and keep an eye on the logs. Also, notice that if the changes you make are not correct syntax, this should be highlighted in the editor.",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/book-a-glitch-intro/02"
                },
                {
                  "title": "# Configuring the Project",
                  "shortTitle": "03",
                  "contentMd": "# Configuring the Project\n\nThe project name can be changed by directly entering a new name on the sidebar:\n\n![](img/08.png)\n\nThis will also change the project url, so if you have shared the app you will have to re-share the new url.\n\nAnother useful option is to disable the 'Refresh App on Changes' option. Try this now. The behaviour of this feature can be a little confusing as the log may continue to report errors - but the live app itself will not be refreshed until you re enable the option.\n\nExplore the tools options:\n\n![](img/10.png)\n\nAnd also the git, import, export options:\n\n![](img/10x.png)\n\n\nExperiment with of all of these options.\n\nFor `Export to github`, the repository must already exist in your account. The project will, however, be on a different branch from master, so might not be visible at first unless you switch branches.",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/book-a-glitch-intro/03"
                },
                {
                  "title": "# Run Offline",
                  "shortTitle": "04",
                  "contentMd": "# Run Offline\n\nOn your workstation, install Node.js:\n\n- <https://nodejs.org> \n\nbe sure to select the `LTS` version, NOT the current version\n\nIn the `Advanced Options` in Glitch, select `Download Project`\n\n- Edit the file `server.js`, changing the following statements:\n\n~~~js\n// listen for requests :)\nvar listener = app.listen(process.env.PORT, function () {\n  console.log('Your app is listening on port ' + listener.address().port);\n});\n~~~\n\nto:\n\n~~~js\n// listen for requests :)\nconst listener = app.listen(process.env.PORT || 4000, function () {\n  console.log('Your app is listening on port ' + listener.address().port);\n});\n~~~\n\nFrom a command shell, inside the project folder you just unarchived, run the following commands:\n\n~~~bash\nnpm install\nnpm start\n~~~\n\nThe latter command should display:\n\n~~~\n> > hello-express@0.0.1 start /Users/edeleastar/Downloads/app\n> node server.js\n\nYour app is listening on port 4000\n~~~\n\nIf you open a browser now on <http://localhost:4000> your application should be running locally:\n\n![](img/13.png)\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/book-a-glitch-intro/04"
                },
                {
                  "title": "# Exercises",
                  "shortTitle": "Exercises",
                  "contentMd": "# Exercises\n\n## Exercise 1: Semantic UI\n\nModify index.html to include the latest semantic ui libraries:\n\n### Step 1:\n\ninclude these extra elements in the `<head>` section of index:\n\n~~~html\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.1/semantic.min.css\" type=\"text/css\">\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.1/semantic.min.js\"></script>\n~~~\n\n### Step 2:\n\nExamine this view:\n\n![](img/11.png)\n\nTry to modify index.html to render as above using semantic ui `container`, `segment`, `header` and `form` classes.\n\n## Exercise 2:\n\nSee if you can incorporate an image into the page:\n\n![](img/12.png)\n\nThis will require you to:\n\n- locate and upload an image by dragging it to the `assets` folder.\n- click on the image to acquire the image `url`\n- insert an `<img>` tag with this url into index.\n\n## Exercise 3:\n\nIf you completed the above tasks, download the the app again and run it locally (see step 4).\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/unit-1/book-a-glitch-intro/Exercises"
                }
              ]
            }
          ]
        },
        {
          "title": "00: Overview ",
          "type": "panelvideo",
          "summary": "00: Overview",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/panelvideo/",
          "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/panelvideo/-wLpQfNMy3s",
          "id": "panelvideo",
          "route": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-00-module-overview/panelvideo/-wLpQfNMy3s",
          "hide": false
        }
      ]
    },
    {
      "title": "1: Introducing Javascript ",
      "type": "topic",
      "summary": "An introduction to the very basics of the Javascript Language",
      "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/topic.png",
      "id": "topic-01-js-intro",
      "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro",
      "hide": false,
      "los": [
        {
          "title": "Introducing Javascript ",
          "type": "unit",
          "summary": "",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-c-js-background/js-background.png",
          "id": "unit-1",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/",
          "hide": false,
          "los": [
            {
              "title": "JS Introduction ",
              "type": "talk",
              "summary": "Place javascript in its proper context, and explore its relationship to the browser.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-c-js-background/js-background.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-c-js-background/FpTU2DSagwE",
              "id": "talk-c-js-background",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-c-js-background/js-background.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-c-js-background/js-background.pdf"
            },
            {
              "title": "Variables & Logic ",
              "type": "talk",
              "summary": "Explore the javascript variables, including the basic types, conversion and usage",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-d-js-varialbes-boolean/js-variables.jpg",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-d-js-varialbes-boolean/nQg97wMuviE",
              "id": "talk-d-js-varialbes-boolean",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-d-js-varialbes-boolean/js-variables.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-d-js-varialbes-boolean/js-variables.pdf"
            },
            {
              "title": "Const, Let & Objects ",
              "type": "talk",
              "summary": "Using const & let. Declaring and using objects.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-e-js-variables-&-objects/js-variables-&-objects.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-e-js-variables-&-objects/ux6LSDfZ3EA",
              "id": "talk-e-js-variables-&-objects",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-e-js-variables-&-objects/js-variables-&-objects.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/talk-e-js-variables-&-objects/js-variables-&-objects.pdf"
            },
            {
              "title": "Lab-2 JS Intro",
              "type": "lab",
              "summary": "Background & Tools, Variables & Boolean Logic",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/img/main.jpg",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/Hr6jefN0f0c",
              "id": "book-b-js-introduction",
              "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction",
              "hide": false,
              "los": [
                {
                  "title": "# Objectives",
                  "shortTitle": "Lab-2 JS Intro",
                  "contentMd": "# Objectives\n\nBackground & Tools, Variables & Boolean Logic\n\n## Background & Tools\n\n- Show messages using `alert` and `console.log`\n- Include a script in an HTML file\n\n## Variables\n\n- Initialize and assign variables in JavaScript\n- Store variables using the `prompt` function\n- Write comments in your JavaScript code\n- List all of the data types in JavaScript\n\n- Distinguish between variables defined using const, let and var \n\n## Boolean Logic\n\n- Write conditional logic using boolean operators\n- List all of the falsey values in JavaScript\n- Use if/else and switch statements to include conditional logic in your JavaScript code\n- Explain the difference between `==` and `===` in JavaScript\n- Convert between data types explicitly in JavaScript\n\n## Objects\n\n- Compare and contrast primitive data types with objects\n- Be able to create an object consisting of multiple primitive types\n- Compose a simple method inside an object.\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/Lab-2 JS Intro"
                },
                {
                  "title": "# Running Javascript",
                  "shortTitle": "01",
                  "contentMd": "# Running Javascript\n\n## Option 1: Chrome Developer Console\n\nFor some of the short JavaScript examples, we will be using the Chrome console. To open up the console press `Control + Shift + J` on Windows and Linux (on a Mac `Option + Command + j`) . Another way to get to the console is to right click on the web page, select Inspect, and then move to the tab called `Console`.\n\nInside of this console you can write JavaScript! So let's start by alerting a message. In the Chrome Console, type the following:\n\n~~~\nalert(\"JavaScript is sweet!\");\n~~~\n\nHit enter, and you should see a pop-up window with the message you typed inside of the alert. (Make sure that when you are writing commands in the Chrome console, you always press enter after you type your code; otherwise, the code won't run.) Try it again with a different message.\n\nIf you find those pop-ups annoying, you can also tell JavaScript to log a message directly to the console, using a function called console.log:\n\n~~~\nconsole.log(\"This is less obtrusive.\");\n~~~\n\nOnce again, after you've written the JavaScript, press enter to execute your code. You should see this message logged in the console.\n\nAs you start typing more in the console, you will see it begins to fill up quickly. If you would like to clear the console you can either type in `clear()` and press enter or press the clear icon on the top left. If you would like see learn some more keyboard shortcuts with the chrome console, you can learn more about that [here](https://developers.google.com/web/tools/chrome-devtools/shortcuts?hl=en)\n\n##Option 2: JavaScript and HTML in 2 Separate Files\n\nThe console is great for writing little bits of JavaScript. But if you need to write code that spans multiple lines, it can be a little annoying. You'll need to type shift + enter to get a line break in the console, since just hitting enter executes your code. This isn't too much trouble for code that's a few lines, but writing a lot of JavaScript in this way can quickly get tiring.\n\nAnother option is to keep your HTML and JavaScript in separate files. To do this, you still need to include a script tag in a HTML file, and this tag should link to a separate JavaScript file. Here's how you could do it:firstf\n\n## first.html\n\n~~~\n<!DOCTYPE html>\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"first.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\nIn this case, we also need a file called `first.js`. So create this file, and inside of it write some JavaScript. Maybe it looks like this:\n\n## first.js\n\n~~~\nalert(\"Coming to you from first.js!\");\n~~~\n\nAs before, the code should execute as soon as you open the HTML page in Chrome.\n\n#Exercises\n\n##Exercise 1. Create the html and javascript files shown in this step.\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/01"
                },
                {
                  "title": "# Variables",
                  "shortTitle": "02",
                  "contentMd": "# Variables\n\n## Fundamentals\n\nWhat's a variable, and why would you ever want to use one? The word \"variable\" may be most familiar to you mathematics classes, when you often use letters like _x_ or _y_ to represent numbers.\n\nThis idea also exists in programming languages. Using variables lets us write code that's easier to read and also easier to change. It's unlikely you'll ever write a significant amount of JavaScript code without using variables, so it's good to get used to them early.\n\nTo see why variables are useful, suppose you want to log a set of greetings to the console:\n\n~~~\nconsole.log(\"Hi, Matt!\");\nconsole.log(\"How are you doing, Matt?\");\nconsole.log(\"See you later, Matt!\");\n~~~\n\nPaste the above into the console in Chrome.\n\n![](img/01x.png)\n\nThis works fine, but what if we want to change the person's name from \"Matt\" to something else? We'll have to change three different spots in our text file, and there's a risk that we'll make a typo when fixing any one of these changes. Wouldn't it be better if we could just store a single copy of the name, and use it wherever we want?\n\nVariables give us this ability. So let's write our first variable. In JavaScript, you can initialize variables using the `var` keyword. Try this:\n\n~~~\nvar firstName = \"Matt\";\nconsole.log(\"Hi, \" + firstName + \"!\");\nconsole.log(\"How are you doing, \" + firstName + \"?\");\nconsole.log(\"See you later, \" + firstName + \"!\");\n~~~\n\nIf you enter this code correctly, you should see the same result as before - JavaScript knows that `firstName` corresponds to the name Matt! \n\n![](img/02x.png)\n\nThere are a few different things going on here, so let's unpack the code a bit. On the first line, we're declaring a variable using the `var` keyword. A variable is just a way for us to save some data in JavaScript. When we typed in `var firstName = \"Matt\"`, JavaScript stored the word `Matt` in the variable `firstName`. From then on, any time you use `firstName` in the console while this window is still open, you'll see the value that `firstName` has stored.\n\nOn the subsequent lines, you'll see there's something else going on too: we're using the `+` operator to combine words made up of characters, or _strings_, together. In JavaScript, when you combine two strings with the `+` operator, you get a new string which is a combination of the two. You can think of this as adding the strings together; a more formal name for it is _concatenation_. For example, if you write the expression `\"Hello\" + \" World\"` in the console, you should see that the result is the single string `\"Hello World\"`.\n\nLet's declare some more variables.\n\n~~~\nvar firstName = \"Matt\";\nvar lastName = \"Lane\";\nvar fullName = firstName + \" \" + lastName;\n~~~\n\nIn all of these examples, we have the keyword `var` in front, followed by the variable name, an assignment operator (the `=` sign), and then the value we want to assign to our variable.\n\nThese examples also illustrate a common convention when writing JavaScript: when declaring variables using multiple words, the standard is to capitalize each word after the first word, and otherwise use lower-case letters (e.g. `firstName`, not `firstname`, `first_name`, `FirstName`, or some other variation). This casing convention is called camel case, and while your JavaScript code will work just fine if you don't abide by this convention, it's good to get in the habit of camel casing your variables.\n\n## The `prompt` function\n\nLet's revisit our earlier example:\n\n~~~\nvar firstName = \"Matt\";\nconsole.log(\"Hi, \" + firstName + \"!\");\nconsole.log(\"How are you doing, \" + firstName + \"?\");\nconsole.log(\"See you later, \" + firstName + \"!\");\n~~~\n\nSince we've used a variable, if we want to change the name, now we only have to do it in one place. That's great! Try changing the value stored in `firstName` from \"Matt\" to your name.\n\nNow suppose we wanted to ask the user for their name. In JavaScript, you can ask the user to provide some information using the `prompt` function. You won't use this function very often (there are better ways to get information from a user), but when you're first learning it's a helpful tool.\n\nWhen you use the `prompt` function, a pop-up window will appear on the page and ask the user to fill in a text box. You can then store what the user types into a variable. Try it out with this modification to our example:\n\n~~~\nvar firstName = prompt(\"What is your first name?\");\n// Now firstName should correspond to whatever the user typed!\nconsole.log(\"Hi, \" + firstName + \"!\");\nconsole.log(\"How are you doing, \" + firstName + \"?\");\nconsole.log(\"See you later, \" + firstName + \"!\");\n~~~\n\nOne last thing. See that line in there that starts with two slashes? That indicates a _comment_. Javascript ignores comments; they are there purely to make notes about the code and generally help with its readability. You can create single-line comments with `//`; if you want a multiline comment, here's a haiku that shows how it's done:\n\n~~~\n/* this is the start of\na multiline comment, and\nthis is the ending. */\n~~~\n\n# Exercises\n\n## Exercise 1: Variables\n\nCreate the following variables using the chrome console:\n\n- `name`, which is a string set to your current name\n- `dayOfBirth`, which is a number set to the day of your birth month\n\nLog these to the console.\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/02"
                },
                {
                  "title": "# Primitive Data Types ",
                  "shortTitle": "03",
                  "contentMd": "# Primitive Data Types \n\nMost of the variables so far stored _strings_. But JavaScript can work with other types of data as well. Let's take a look at the primitive data types.\n\nJavaScript has 6 primitive data types, but we'll only talk about 5 of them. Here's what they look like:\n\n*   string - `var greeting = \"hello\";`\n*   number - `var favoriteNum = 33`;\n*   boolean - `var isAwesome = true;`\n*   undefined - `var foo;` or ` var setToUndefined = undefined;`\n*   null - `var empty = null;`\n\nJavaScript is known as a \"weakly\" typed language. What this means is that when you create variables and assign them to values, you do not have to specify the type of data you are working with. In statically (or strongly) typed languages, like Java and C++, you do need to specify the type.\n\nNow let's look at data types a little more.\n\n## strings\n\nAs we saw above, a string is a set of characters enclosed in quotes. A string can be defined using double quotes:\n\n~~~\nvar greeting = \"Hello Whiskey\";\n~~~\n\nor using single quotes:\n\n~~~\nvar greeeting = 'Hello World';\n~~~\n\nSo what is the difference between the two ways of initializing a string? Well, first of all, if you want quotes in your string, it's nice to have another option to start and end the string:\n\n~~~\nvar phrase = 'Matt said, \"I haven\\'t been to Chile\", the other day.';\n~~~\n\nWhat would happen if you try to use double quotes to create the previous string instead of using single quotes? Try it in your console.\n\nAlso notice that there is a backslash before the single quote in haven't. The backslash is called an escape character and it tells JavaScript that the single quote in the string should not be used to end the string. Try removing the backslash from the string and see what happens in your JavaScript console.\n\nTry declaring the above variables in the chrome, and then log then:\n\n![](img/03x.png)\n\n## number\n\nJavaScript numbers can be positive:\n\n~~~\nvar num = 5;\n~~~\n\nnegative:\n\n~~~\nvar num = -25;\n~~~\n\n## decimal numbers:\n\n~~~\nvar piApproximation = 3.14159265;\n~~~\n\nand we can also do all of the math expressions you'd expect:\n\n~~~\nvar x = 1 + 3;\nvar a = 4.5;\nvar b = 5.9;\nvar c = Math.sqrt(a * a + b * b);\nvar studentTeacherRatio = 4 / 1;\n~~~\n\nIf you need to do any kind of calculation in the application you're building, chances are you'll be relying heavily on the number type.\n\nDeclare and output these variables in the console:\n\n![](img/04x.png)\n\n## boolean\n\nA boolean type can only be in one of two states, true or false. In other words:\n\n~~~\nvar pizzaIsGood = true;\n~~~\n\n~~~\nvar pizzaIsBad = false;\n~~~\n\nBoolean types are a very useful tool for controlling our program. For example, if a user is signed in, you might want to show them a link to update their profile; but if a user is not logged in, you'd probably just want to show them a sign-in link. This sort of behavior, where the code that gets executed is conditioned on something else, happens all the time in programming. We'll learn more about how to deal with these situations in the next chapter.\n\n### undefined\n\nAny variable that is created in JavaScript that is not assigned a value is undefined:\n\n~~~\nvar noValue;  // The value here will be undefined\n~~~\n\nYou can also explicitly set a variable to undefined:\n\n~~~\nvar favoriteFood = \"Candy\";\n// Changed your mind\nvar favoriteFood = undefined;\n~~~\n\n## null\n\nNull is not the same as undefined. It signifies an intentional absense of data.\n\n~~~\nvar secondEmailAddress = null;\n~~~\n\nIt is important to remember that `null` and `undefined` are different types in JavaScript. This can be a confusing feature of JavaScript, even for people who know other programming languages. The distinction can seem somewhat arbitrary when you're first learning the language, but as you get more comfortable the distinction will become clearer. \n\n## Figuring out a variable's type in JavaScript\n\nIn JavaScript, we have a keyword called `typeof` that returns the type of the variable. While this seems pretty fool-proof, there are some quirks that we should be aware of. In the Chrome console, let's type out each one of these:\n\n*   `typeof \"\";` - \"string\"\n*   `typeof 5;` - \"number\"\n*   `typeof false;` - \"boolean\"\n*   `typeof undefined;` - \"undefined\"\n*   `typeof null;` // hmmm, this is not what we expect, it returns \"object\"!\n\n## Converting between types\n\nVery often you'll need to convert a value from one type to another. For example, maybe you want to do some math on a couple of numbers, but you get the numbers from a form and they have a value of string. In some cases JavaScript will change types implicitly, in a process that's often referred to as (implicit) type coercion. We'll discuss the details of this later.\n\nFor now, though, let's take a look at some ways to explicitly change the type of a value. Here are a few examples:\n\n## Converting to a string: `toString`\n\nThe `toString` method will convert any value which is not undefined or null into a string. Here are a couple of examples:\n\n~~~\nvar num = 5;\nvar bool = true;\n\nnum.toString(); // \"5\";\nbool.toString(); // \"true\";\n~~~\n\n## Converting to a number\n\nThere are several ways you can convert a value to a number. One way is to parse the number, using `parseInt` or `parseFloat`: each function will look at a string from left to write and try to make sense of the characters it sees as numbers. Here are some examples:\n\n~~~\nparseInt(\"2\"); // 2\nparseFloat(\"2\"); // 2\nparseInt(\"3.14\"); // 3\nparseFloat(\"3.14\"); // 3.14\nparseInt(\"2.3alkweflakwe\"); // 2\nparseFloat(\"2.3alkweflakwe\"); // 2.3\nparseInt(\"w2.3alkweflakwe\"); // NaN (not a number)\nparseFloat(\"w2.3alkweflakwe\"); // NaN (not a number)\n~~~\n\n\n## Exercise : \n\nIn the `first.js` file created in step 1, to do the following:\n\n- Prompt the user for their favorite color\n- Prompt the user fir their favorire number\n\nLog these values to the console along with a friendly message.\n\nLoad `first.html` in chrome and keep an eye on the console to see that the message is being displayed.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/03"
                },
                {
                  "title": "# Boolean Logic",
                  "shortTitle": "04",
                  "contentMd": "# Boolean Logic\n\n### Boolean Logic\n\nAn essential part of writing programs is being able to execute code that depends on certain conditions. There are many different examples when you'd want to conditionally execute code. Here are just a few:\n\n*   You want the navigation bar on your website to look different based on whether or not someone is logged in\n*   If someone enters their password incorrectly, you want to let them know; otherwise, you want to log them in\n*   You're building a tic-tac-toe game, and want to know whether it's X's turn or O's turn\n*   You're building a social network and want to keep person A from seeing person B's profile unless the two of them are friends\n\nIt's very hard to write any kind of interesting software without making use of conditionals and boolean logic. To do so, we'll make use of booleans (`true` and `false`), along with `if` statements and `switch` statements.\n\nAn `if` statement looks something like this:\n\n~~~\nvar instructor = \"Elie\";\n\n// we begin with an \"if\" statement followed by a condition in () and a block of code inside of {}\nif (instructor === \"Elie\") {\n    console.log(\"Yes!\");\n} else {\n    console.log(\"No\");\n}\n~~~\n\nTry this (using copy/paste from above):\n\n![](img/05x.png)\n\nNotice that we used a `===` instead of `=`. Anytime that we use more than one equals operator (we can either use `==` or `===`) we are doing a **comparison** (comparing values). When we use a single equals operator `=`, we are doing what is called **assignment** (setting a variable equal to some value).\n\nThis first example might appear a little strange, because the condition inside of the `if` statement (`instructor === \"Elie\"`) will always return true! Here's another example for you to consider.\n\n Run this code a couple of times and try to get both messages to log to the console based on what you enter into the prompt:\n\n~~~\nvar favoriteFood = prompt(\"What's your favorite food?\");\n\nif(favoriteFood === \"pizza\") {\n    console.log(\"Woah! My favorite food is pizza too!\");\n} else {\n    console.log(\"That's cool. My favorite food is pizza.\");\n}\n~~~\n\nNow, what's the difference between `==` and `===`, you ask? We'll get to that down below. For now, though, it might be helpful to play around with these operators in the Chrome console, and see if you can come up with a guess as to how these operators behave differently.\n\n~~~\nvar number = 55;\n\n// we begin with an \"if\" statement followed by a condition in () and a block of code inside of {}\nif(number == \"55\") {\n    console.log(\"Yes!\");\n} else {\n    console.log(\"No\");\n}\n~~~\n\nPaste the above code into the console - the first time using `==` in the comparison, the second time using `===`. Observe the output carefully.\n\n### Difference between `==` and `===`\n\nIn JavaScript we have two different operators for comparison: the double and triple equals. Both operators check whether the two things being compared have the same value, but there's one important difference. `==` allows for type coercion of the values, while `===` does not. So to understand the difference between these operators, we first need to understand what is meant by type coercion.\n\nConsider the following examples:\n\n~~~\n// 1.\n5 + \"hi\"; // \"5hi\"\n\n// 2.\nif (\"foo\") {\n  console.log(\"this will show up!\");\n}\n\n// 3.\nif (null) {\n  console.log(\"this won't show up!\");\n}\n\n// 4.\n+\"304\"; // 304\n~~~\n\nLet's figure out what's happening in each of these examples. In the first one, you've asked JavaScript to add a number and a string. In a lot of programming languages, this would throw an error, but JavaScript is more accomodating. It evaluates the expression 5 + \"hi\" by first _coercing_ 5 into a string, and then interpreting the \"+\" operator as string concatenation. So it combines the string \"5\" with the string \"hi\" into the string \"5hi\".\n\nThe next two examples show a similar sort of _coercion_. JavaScript expects the values inside of parentheses that come after the keyword `if` to be booleans. If you pass in a value which is not a boolean, JavaScript will _coerce_ the value to a boolean according to the rules for truthy/falsey values defined on the next step. Since \"foo\" is not a falsey value, it will be coerced to `true`, which is why the second example logs something to the console. `null`, however, is a falsey value, so it gets coerced to false and nothing shows up in the third example.\n\nThe last example shows a very common way to coerce a stringified number back into a number. By prefacing the string with the plus sign, JavaScript will perform a _coercion_ on the value and convert it from a string value to a number value.\n\nIn essence, then, coercion is just the process of converting a value from one type to another. JavaScript uses coercion pretty liberally among programming languages, so if you don't understand how coercion in JavaScript works, it can be easy to introduce bugs into your code.\n\nBut what does all of this have to do with `==` and `===`? Let's look at some examples:\n\n~~~\n5 == \"5\"; // true\n5 === \"5\"; // false\n\"true\" === true; // false\n\"true\" == true; // false\ntrue == 1; // true\ntrue === 1; // false\nundefined === null; // false\nundefined == null; // true\n~~~\n\n\nWhat's going on here? Let's deal with the expressions involving `===` first. As you can see, the expressions `5 === \"5\"`, `\"true\" === true`, `true === 1`, and `undefined === null` all evaluate to `false`. In some sense, perhaps this shouldn't be so surprising: none of the values being compared are the same! One way to think about this is to recall the types of the primitives being compared. In the first case, we're comparing a number to a string; in the second case, a boolean and a string; in the third case, a boolean and a number; and in the last case, `undefined` and `null`. How can these values be the same when the primitives involved aren't even of the same type??\n\nFrom the above examples, you can see that the `==` operator is a little less strict (in fact, `===` is sometimes referred to as the \"strict\" equality operator, while `==` is sometimes referred to as the \"loose\" equality operator). The reason that comparisons like `5 == \"5\"` evaluate to true is because `==` allows for type coercion!\n\nBut what gets coerced? Does `5` become `\"5\"` or does `\"5\"` become `5`? In this case, according to the specification the string gets coerced into a number, not the other way around. This might seem like an unimportant detail, but there are a couple of gotchas in the way coercion works that can be confusing when you first encounter them.\n\nFor example, it might seem like `\"true\" == true` should evaluate to `true`, since `\"true\"` is a truthy value! But in fact, what actually happens is that the boolean `true` gets coerced to a number (1), and then `\"true\"` is compared to `1`, which returns false. (This is also why `true == 1` evaluates to `true`.)\n\nIt's less important to memorize these rules for how coercion works with `==` than to recognize that `==` allows for coercion while `===` doesn't. If you don't want to have to think about coercion in your comparisons, stick to `===`.\n\n## If Else\n\n### If / else statements with other comparators\n\nWe previously saw what an `if` statement looks like. Let's examine this a bit more:\n\n~~~\nvar x = 4;\nif(x <= 5){\n    console.log(\"x is less than or equal to five!\");\n} else {\n    console.log(\"x is not less than or equal to five!\");\n}\n~~~\n\nWe saw before that we can use `==` or `===` to compare values. We can also check for inequality, using\n\n`<` - less than,\n\n`<=` - less than or equal to,\n\n`>` - greater than,\n\n`>=` - greater than or equal to,\n\n`!=` - not equal (loose), and\n\n`!==` - not equal (strict).\n\n### Falsey Values\n\nAs we've alluded to already, another essential concept to understand in JavaScript is that some values (aside from `false`) are actually false as well, when they're used in a context where JavaScript expects a boolean value! Even if they do not have a \"value\" of false, these values will be translated (or \"coerced\") to false when evaluated in a boolean expression.\n\nIn JavaScript there are 6 falsey values:\n\n*   `0`\n*   `\"\"`\n*   `null`\n*   `undefined`\n*   `false`\n*   `NaN` (short for not a number)\n\nIf you ever want to determine if a value is truthy or falsey, you can prefix it with `!!`. By using `!!` it explicitly coerces a value into its boolean form.\n\nWhat do these values return? Try them out in the Chrome console now:\n\n`!!false`  \n`!!-1`  \n`!!-567`  \n`!![]`  \n`!!{}`  \n`!!\"\"`  \n`!!null`\n\nYou can read more about these [here](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)\n\n### !, || and &&\n\nIn our conditions (and assignments) we can use certain logical operators to write more complex statements. Here are some other useful operators:\n\n`!` - the **not** operator, which flips the boolean value (`!true === false`). `!!` simply applies this operator twice, so `!!true === true`, and `!!false === false`.\n\n`||` - the **or** operator, which in a boolean context returns true if either condition is true\n\n`&&` - the **and** operator, which in a boolean context returns true if both conditions are true\n\nYou can read more about logical operators [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators).\n\n### If / else if / else\n\nSometimes you may have more than two conditions to check. In this case, you can chain together multiple conditions using `else if`. Here's an example:\n\n~~~\nvar number = prompt(\"What's your favorite number?\");\n\nif (number >= 1000) {\n    console.log(\"Woah, that's a big number!\");\n} else if (number >= 0) {\n    console.log(\"That's a cool number.\");\n} else {\n    console.log(\"Negative numbers?! That's just bananas.\");\n}\n~~~\n\nTry this out with a few different numbers and see what happens.\n\n### Switch statements\n\nAnother way to write conditional logic is to use a `switch` statement. While these are used less frequently, they can be quite useful when there are multiple conditions that can be met. Notice that each `case` clause needs to end with a `break` so that we exit the `switch` statement. Here is an example:\n\n~~~\nvar feeling = prompt(\"How are you feeling today?\").toLowerCase();\n// what do you think the .toLowerCase does at the end?\n\nswitch(feeling){\n    case \"happy\":\n        console.log(\"Awesome, I'm feeling happy too!\");\n        break;\n    case \"sad\":\n        console.log(\"That's too bad, I hope you feel better soon.\");\n        break;\n    case \"hungry\":\n        console.log(\"Me too, let's go eat some pizza!\");\n        break;\n    default:\n        console.log(\"I see. Thanks for sharing!\");\n}\n~~~\n\n# Exercises\n\n## Exercise 1: Boolean Expressions\n\nWrite down what the following statements will return. Enter them in the console to verify your answers.\n\n1.  `2 == \"2\";`\n2.  `2 === 2;`\n3.  `true && false;`\n4.  `false || true;`\n5.  `true || false;`\n\n## Exercise 2: If Statement\n\nAnswer the following questions about this code block:\n\n~~~\nvar isLearning = true;\nif (isLearning) {\n  console.log(\"Keep it up!\");\n} else {\n  console.log(\"Pretty sure you are learning....\");\n}\n~~~\n\n1.  What should the above code console.log?\n2.  Why do we not need to specify `if(isLearning === true)`? Why does `if(isLearning)` work on its own?\n\nTest the fragment in the chrome developer console.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/04"
                },
                {
                  "title": "# Const, Let & Simple Objects",
                  "shortTitle": "05",
                  "contentMd": "# Const, Let & Simple Objects\n\n## Const & Let\n\nThe variable statement declares a variable, optionally initializing it to a value.\n\n### var\n\n~~~\n// String\nvar greeting = “hello\";\n// Number\nvar favoriteNum = 33;\n~~~\n\n### const\n\nThe `const` statement is similar to the var statement, however, the value cannot be redeclared or reassigned.\n\n~~~\n// String\nconst greeting = 'hello';\n\n// Number\nconst favoriteNum = 33;\n~~~\n\nSo if we try this:\n\n~~~\nfavoriteNum = 23;\n~~~\n\nWe will get an error. Try the above in the chrome console now and see what happens. You should see something like this:\n\n![](img/01.png)\n\n\n### let \nWe can also use `let`:\n\n~~~\nlet anotherFavourite = 33;\nanotherFavourite = 32;\n~~~\n\nThis is similar to `var`, in that it introduces a variable that can be reassigned later. It has other benefits we will explore in subsequent lessons.\n\nIn our applications, we will always use `const` or `let`, and avoid using `var`.\n\n## Simple Objects\n\nWhereas primitive data typed variables hold individual values. e.g:\n\n- numbers\n- strings\n- boolean\n\nObject types can hold more than one value. e.g.:\n\n- a number AND a string.\n- 2 numbers and a boolean and a string\n- 3 strings and 2 numbers\n\nObjects are central to creating interesting and powerful programs.\n\nTry this on the console (remember to use Shift and Enter to go onto a new line for entering multiple lines of code:\n\n~~~\nconst homer = {\n  firstName: 'homer',\n  lastName: 'simpson',\n};\n~~~\n\nThen try this:\n\n~~~\nconsole.log(homer);\n~~~\n\nThis will look like this:\n\n![](img/02.png)\n\nTry this object:\n\n~~~\nconst bart = {\n  firstName: 'bart',\n  lastName: 'simpson',\n  age: 10,\n};\n\nconsole.log(bart);\n~~~\n\nWe have now created 2 objects. We can print the two of them again:\n\n~~~\nconsole.log ('Bart = ' + bart);\nconsole.log ('homer = ' + homer);\n~~~\n\nWe can also print out individual attributes:\n\n~~~\nconsole.log ('Barts age =', bart.age);\n~~~\n\n![](img/03.png)\n\n# Exercises\n\nFor these exercises, create:\n\n## simpsons.html\n\n~~~\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"simpsons.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\n## simpsons.js\n\n~~~\n// JS Code here\n~~~\n\nAnd use the developer tools in chrome to run and monitor the script.\n\n## Exercise 1: Maggie\n\nIn `simpsons.js`, Create an object called `maggie`, with Maggies details (say her age is 2). Log the object to the console. Load `simpsons.html` and make sure maggies details appear on the console.\n\n## Exercise 2: Lisa\n\nCreate an object called `lisa`, with Lisa's details (say her age is 12). In addition, store her favourite musical instrument. Log the object to the console.\n\n\n\n\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/05"
                },
                {
                  "title": "# Objects with Functions",
                  "shortTitle": "06",
                  "contentMd": "# Objects with Functions\n\nTry this object in the console:\n\n~~~\nconst marge = {\n  firstName: 'marge',\n  lastName: 'simpson',\n  age: 10,\n  sayHello() {\n    console.log('Hello from me!');\n  }\n};\n~~~\n\nThis has different type of attribute - a function:\n\n~~~\n  sayHello() {\n    console.log('Hello from me!');\n  }\n~~~\n\nWe can log the object as before:\n\n~~~\nconsole.log(marge);\n~~~\n\nWe can also call the function we have just defined:\n\n~~~\nmarge.sayHello();\n~~~\n\nYour console might look like this:\n\n![](img/05.png)\n\n## this\n\nTry this new object in the console:\n\n~~~\nconst ned = {\n  firstName: 'ned',\n  lastName: 'flanders',\n  age: 45,\n  speak() {\n    console.log('How diddley do? says ' + this.firstName);\n  }\n}\n\nned.speak();\n~~~\n\nNote the difference in the function:\n\n~~~\n  speak() {\n    console.log('How diddley do?' + this.firstName);\n  }\n~~~\n\nHere we are using `this` to access the firstName attribute of the ned object.\n\n![](img/06.png)\n\n# Exercises\n\nUse `simpsons.js` (not the console) for this exercise.\n\n## Exercise 1: Objects with Functions\n\nCreate another Simpsons character of your choice. Include a hello() function, and have the function say something relevant to the character. Also include a goodby() function which says something else. Once you have created the objects, call them functions a few times.\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/06"
                },
                {
                  "title": "# Chrome Debugger",
                  "shortTitle": "07",
                  "contentMd": "# Chrome Debugger\n\nUse this copy of the `simpsons.js` file (copy/paste in, replacing your content:\n\n## simpsons.js\n\n~~~\nconst homer = {\n  firstName: 'homer',\n  lastName: 'simpson',\n};\n\nconsole.log(homer);\n\nconst bart = {\n  firstName: 'bart',\n  lastName: 'simpson',\n  age: 10,\n};\n\nconsole.log(bart);\n\nconst marge = {\n  firstName: 'marge',\n  lastName: 'simpson',\n  age: 10,\n  sayHello() {\n    console.log('Hello from me!');\n  },\n};\n\nmarge.sayHello();\n\nconst ned = {\n  firstName: 'ned',\n  lastName: 'flanders',\n  age: 45,\n  speak() {\n    console.log('How diddley do? says ' + this.firstName);\n  },\n};\n\nned.speak();\n~~~\n\nIn chrome, open `simpsons.html`  again now - and also open developer tools:\n\n![](img/08.png)\n\nSelect the `Sources` tab, and then select `simpsons.js`:\n\n![](img/09.png)\n\nNow, double click in the margin on line 6 - so that a blue arrow appears:\n\n![](img/10.png)\n\nReload the page (press the reload button in the browser tool bar)\n\n![](img/14.png)\n\n... and look carefully at the view now presented:\n\n![](img/11.png)\n\nNotice that the object homer has appeared on the right panel above.\n\nNow try the following - press the `Step over..` button indicated below:\n\n![](img/12.png)\n\nThis will move the blue indicator on in the script:\n\n![](img/13.png)\n\nPress this `Step over` button again a few times. Monitor the changes in the right hand panel as you do this. \n\nReload the page again - step through the script line by line, carefully looking at the right hand pane,.\n\n# Exercise\n\nExperiment with creating and removing the blue indicators in the margin:\n\n![](img/15.png)\n\nThese are called `breakpoints`, and they allow you to stop the program at the point indicated. You can remove a breakpoint by double clicking in the margin. \n\nTry to understand what happens when you press the reload button on the browser. Also, explore the right hand pane in the developer tools console\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/07"
                },
                {
                  "title": "# Exercises",
                  "shortTitle": "Exercises",
                  "contentMd": "# Exercises\n\n## Exercise 1:\n\nUsing the `simpsons.html` and `simpsons.js` files from the last step as a guide, create a new pair of files called `exercise-01.html` and `exercise-01.js`. Make sure exercise-01.html loads exercise-01.js.\n\nIn exercise-01.js, write a function that reads a firstname, lastname and age using the `prompt` function, create and object called `user` that contains these values, and then logs that object to the console.\n\nHint: This is how you prompt the user for a string:\n\n~~~\nconst usersFirstName = prompt('enter first name');\n~~~\n\nAnd this is how you might store the string in an object:\n\n~~~\nconst user = {\n  firstName: usersFirstName,\n};\n~~~\n\n## Exercise 2:\n\nExtend the program to also ask also for a greeting. Extend the object so that it has a member function 'sayHello' that, when called, prints the greeting to the console, including the name of the user.\n\n\n## Exercise 3:\n\nChallenging!\n\nWrite a script that will read two values using prompt()\n\n- the name of a song\n- the artist who composed it\n\nPut these two values in an object called `favourite`. Also, in this object introduce a function called `print()`, which will print the song details to the console.\n\nEg - it might print\n\n~~~\nMy favorite song is Moonlight Sonata by Beethoven\n~~~\n\nIf the values 'Moonlight Sonata' and \"Beethoven\" had been entered.\n\n<hr>\n<br>\nThe solutions are [here](./solutions.html). Try not to look at them until you have had a good go at the exercises first.\n\n## Exercise 4: \n\nAlso Challenging!\n\nAnswer the following questions about this code block:\n\n~~~\nvar firstVariable;\nvar secondVariable = \"\";\nvar thirdVariable = 1;\nvar secretMessage = \"Shh!\";\n\nif(firstVariable){\n  console.log(\"first\");\n} else if(firstVariable || secondVariable){\n  console.log(\"second\");\n} else if(firstVariable || thirdVariable){\n  console.log(\"third\");\n} else {\n  console.log(\"fourth\");\n}\n~~~\n\n1.  What should the above code console.log? **Why?**\n2.  What is the value of `firstVariable` when it is created?\n3.  Is the value of firstVariable a \"truthy\" value? **Why?**\n4.  Is the value of secondVariable a \"truthy\" value? **Why?**\n5.  Is the value of thirdVariable a \"truthy\" value? **Why?**\n\nRun the script - in the console or in first.js - to see if your answers are correct.\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/Exercises"
                },
                {
                  "title": "# Exercise 1:",
                  "shortTitle": ".",
                  "contentMd": "# Exercise 1:\n\n~~~\nconst usersFirstName = prompt('enter first name');\nconst usersLastName = prompt('enter first name');\nconst usersAge = prompt('enter first name');\n\nconst user = {\n  firstName: usersFirstName,\n  lastName: usersFirstName,\n  age: usersFirstName,\n};\n\nconsole.log(user);\n~~~\n\n# Exercise 2:\n\n~~~\nconst usersFirstName = prompt('enter first name');\nconst usersLastName = prompt('enter last name');\nconst usersAge = prompt('enter your age');\n\nconst userGreeting = prompt('enter your greeting');\n\nconst user = {\n  firstName: usersFirstName,\n  lastName: usersFirstName,\n  age: usersFirstName,\n  greeting: userGreeting,\n  sayHello() {\n    console.log(this.greeting + ' says ' + this.firstName);\n  },\n};\n\nconsole.log(user);\nuser.sayHello();\n~~~\n\n# Exercise 3:\n\n~~~\nHave a go yourself!\n~~~",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/unit-1/book-b-js-introduction/."
                }
              ]
            }
          ]
        },
        {
          "title": "01: Javascript Introduction ",
          "type": "panelvideo",
          "summary": "01: Javascript Introduction",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/panelvideo/",
          "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/panelvideo/KtlSKs5J8EQ",
          "id": "panelvideo",
          "route": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-01-js-intro/panelvideo/KtlSKs5J8EQ",
          "hide": false
        }
      ]
    },
    {
      "title": "2: Javascript Arrays ",
      "type": "topic",
      "summary": "Exploring Javascript arrays in detail",
      "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/topic.png",
      "id": "topic-02-arrays",
      "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays",
      "hide": false,
      "los": [
        {
          "title": "Javascript Variables, Objects & Methods ",
          "type": "unit",
          "summary": "Javascript Variables, Objects & Methods",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-0/talk-e-variables-&-objects/variables-&-objects-review.png",
          "id": "unit-0",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/",
          "hide": false,
          "los": [
            {
              "title": "Variables & Objects Review ",
              "type": "talk",
              "summary": "A concise tour of the structure of variables & objects in Javascript",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-0/talk-e-variables-&-objects/variables-&-objects-review.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-0/talk-e-variables-&-objects/lyaw5a_Ckls",
              "id": "talk-e-variables-&-objects",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-0/talk-e-variables-&-objects/variables-&-objects-review.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-0/talk-e-variables-&-objects/variables-&-objects-review.pdf"
            },
            {
              "title": "Methods & Arrays Review ",
              "type": "talk",
              "summary": "A concise look at methods & Arrays",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-0/talk-f-methods-&-arrays/methods-&-arrays.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-0/talk-f-methods-&-arrays/UWsq4PH32eE",
              "id": "talk-f-methods-&-arrays",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-0/talk-f-methods-&-arrays/methods-&-arrays.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-0/talk-f-methods-&-arrays/methods-&-arrays.pdf"
            }
          ]
        },
        {
          "title": "Javascript Arrays ",
          "type": "unit",
          "summary": "Javascript Arrays",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-a-arrays-basics/arrays-basics.png",
          "id": "unit-1",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/",
          "hide": false,
          "los": [
            {
              "title": "Arrays: Basics ",
              "type": "talk",
              "summary": "Creating, accessing, adding to and removing from arrays.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-a-arrays-basics/arrays-basics.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-a-arrays-basics/uUE9oMSh_qU",
              "id": "talk-a-arrays-basics",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-a-arrays-basics/arrays-basics.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-a-arrays-basics/arrays-basics.pdf"
            },
            {
              "title": "Array Methods ",
              "type": "talk",
              "summary": "Exploring length, slice, concat, join, indexOf, lastIndexOf",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-b-array-methods/array-methods.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-b-array-methods/yYPmBd3ABYk",
              "id": "talk-b-array-methods",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-b-array-methods/array-methods.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-b-array-methods/array-methods.pdf"
            },
            {
              "title": "Array Iteration ",
              "type": "talk",
              "summary": "Using for, while and do-while to iterate over an array",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-c-array-iteration/array-iteration.jpeg",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-c-array-iteration/0stQce74AJw",
              "id": "talk-c-array-iteration",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-c-array-iteration/array-iteration.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-c-array-iteration/array-iteration.pdf"
            },
            {
              "title": "Arrays of Objects ",
              "type": "talk",
              "summary": "Arrays of more complex data structures, including nested objects.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-d-arrays-of-objects/arrays-of-objects.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-d-arrays-of-objects/yXrGZzbTbkQ",
              "id": "talk-d-arrays-of-objects",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-d-arrays-of-objects/arrays-of-objects.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/talk-d-arrays-of-objects/arrays-of-objects.pdf"
            },
            {
              "title": "Lab-3 JS Arrays",
              "type": "lab",
              "summary": "Array Basics, Array Methods & Iteration",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/book-a-js-arrays/img/main.png",
              "id": "book-a-js-arrays",
              "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/book-a-js-arrays",
              "hide": false,
              "los": [
                {
                  "title": "# Objectives",
                  "shortTitle": "Lab-3 JS Arrays",
                  "contentMd": "# Objectives\n\n Array Basics, Array Methods & Iteration\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/book-a-js-arrays/Lab-3 JS Arrays"
                },
                {
                  "title": "# Array Basics",
                  "shortTitle": "01",
                  "contentMd": "# Array Basics\n\n## Introduction\n\nSo far, we've seen five different primitive data types in JavaScript: `string`, `number`, `boolean`, `null`, and `undefined`. We've also seen how to store these values inside of variables.\n\nSometimes, however, you need a more complex data structure when building your application. For example, maybe you need a list of restaurant names so that you can display each one to a user when she's looking for a place to eat nearby. Or maybe you're doing some math and want to maintain a list of prime numbers. It would be pretty annoying to have to write\n\n~~~\nconst firstPrime = 2;\nconst secondPrime = 3;\nconst thirdPrime = 5;\nconst fourthPrime = 7;\nconst fifthPrime = 11;\n~~~\n\nThis is fine if you know how many primes you need at the outset, but what if you didn't know how many values you needed to store? Or what if you did know how many values you needed, but the number was quite large? Writing out a variable for each one can quickly become unmanageable.\n\nThankfully, JavaScript provides you with a data type to help in these situations: the _array_. You can think of an array as simply a list of values.\n\nTo write an array in JavaScript, you use square brackets `[]` and comma separate each value in the array. Here are some examples:\n\n~~~\nconst primes = [2, 3, 5, 7, 11];\nconst names = ['Alice', 'Bob', 'Charlie'];\nconst booleans = [true, false, false, true];\nconst mixedTypes = [1, 'sweet', true, null, NaN, 'bye!'];\nconst woahhh = ['Whats up with this? -->', ['Woah', 'crazy!']];\nconst emptyArray = [];\n~~~\n\nYou can put anything you want inside of an array: numbers (as in `primes`), strings (as in `names`), booleans (as in `booleans`), and other primitive types are all fair game. You can also have multiple different types inside of an array: just because the first element in an array is a number doesn't mean that every subsequent element needs to be a number too. For example, `mixedTypes` has many different types inside of it. You can even store arrays inside of other arrays, as in the `woahhh` array above!\n\nAt this point, you may be wondering why we didn't mention arrays when we talked about other data types in JavaScript. The reason is that up until now, we've been dealing with _primitive_ data types in JavaScript. But arrays aren't primitives; they're examples of what's called a reference type. We'll talk about reference types in more detail in the next javascript lab. For now, it's sufficient to note that\n\n~~~\nconsole.log(typeof [1, 2, 3]);\n~~~\n\nprints `object`. So arrays are a type of object, which you used in gomix in last week's lab (more on objects later).\n\n## Accessing and updating array values\n\nTo access an element in an array, we specify the name of the array followed by sqqare brackets brackets and the _position_ (also called the _index_) of the element we're trying to access. **Arrays are zero-indexed**, which means that the first element is accessed at index 0\\. Let's look at an example:\n\n~~~\nconst arr1 = [5, 3, 10];\nconsole.log(arr1[0]); // should equal 5\nconsole.log(arr1[1]); // should equal 3\nconsole.log(arr1[2]); // should equal 10\nconsole.log(arr1[3]); // should be undefined -- remember, arrays are zero-indexed!\nconsole.log(arr1[1 + 1]); // the same as arr[2], which is 10\nconsole.log(arr1[arr1.length - 1]); // shorthand for the last element of an array, in this case 10\n~~~\n\nTo update a value in an array, we can simply assign an element at a given index to a new value:\n\n~~~\nconst arr2 = [5, 3, 10];\narr2[0] = -1000;\narr2[2] = 'dope';\nconsole.log(arr2); // should be [-1000, 3, 'dope']\n~~~\n\n## Adding to arrays\n\nThere are a number of ways you can add elements to an array.\n\nOne way is by setting a value at a new index in the array.\n\n~~~\nconst arr3 = [1,2,3];\narr3[3] = 4;\nconsole.log(arr3); // [1,2,3,4]\n~~~\n\nBe careful with this approach, though -- you can add an element at any index, and any elements that don't have values in them will be filled with `undefined` values.\n\n~~~\nconst arr4 = [1,2,3];\narr4[5] = 'whoa';\nconsole.log(arr4); // [1, 2, 3, undefined, undefined, 'woah']\n~~~\n\nIf you want to add to the end of an array, a better approach is to use the `push` function - this function returns the new length (the number of elements) of the array.\n\n~~~\nconst arr5 = [3, 2, 5];\narr5.push(7); \nconsole.log(arr5); // [3, 2, 5, 7]\n~~~\n\nOn the other hand, if you want to add to the beginning of an array, you can use the `unshift` function. As with `push`, `unshift` returns the length of the modified array.\n\n~~~\nconst arr6 = [1, 2, 3];\narr6.unshift(0);\nconsole.log(arr6); // [0,1,2,3]\n~~~\n\n## Removing from arrays\n\nWe've seen how we can add elements from arrays. But what about removing elements?\n\nOne (not common) way to remove elements is to manually set the length of the array to a number smaller than its current length. For example:\n\n~~~\nconst arr7 = [1, 2, 3];\narr7.length = 2; // set the new length\nconsole.log(arr7); // [1,2]\n~~~\n\nA more common way to remove elements from the back of an array is to use `pop()`. This function works in sort of the opposite way as `push`, by removing items one by one from the back of the array. Unlike `push`, however, `pop` doesn't return the length of the new array; instead, it returns the value that was just removed.\n\n~~~\nconst arr8 = [1,2,3];\narr8.pop(); // returns 3\nconsole.log(arr8); // [1,2]\n~~~\n\nIf you want to remove an element from the _front_ of an array, you should `shift()` (like `unshift`, but the opposite)! As with `pop()`, `shift()` returns the removed value.\n\n~~~\nconst arr9 = [1,2,3];\narr9.shift();\nconsole.log(arr9); // [2,3]\n~~~\n\nThere's also a `delete` keyword in JavaScript, which you might think could be used to delete elements in an array. However, this isn't quite how `delete` works with arrays. When you use this keyword, the value at the index where you delete will simply be replaced by `undefined`. This usually isn't what you want, which is why you won't often see people use `delete` on arrays. It's more common to see this word used with objects, which we'll talk more about in the next unit.\n\n~~~\nconst arr10 = [5, 4, 3, 2];\ndelete arr10[1];\nconsole.log(arr10); // [5, undefined, 3, 2]\n~~~\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-01.html\n- arrays-01.js\n\nUse this contents for the html file:\n\n## arrays-01.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-01.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\nAnd use the developer tools in chrome to run and monitor the script.\n\n## Exercise 1:\n\nIn arrays-01.js, create an array of your favorite foods (call it `favoriteFoods`). Make sure it has at least three elements.\n\n- Access the second element in `favoriteFoods`.\n- Change the last element in `favoriteFoods` to some other food.\n- Remove the first element in `favoriteFoods` and store it in a variable called `formerFavoriteFood`.\n- Add a favorite food to the back of the `favoriteFoods` array.\n- Add a favorite food to the front of the `favoriteFoods` array.\n\n## Exercise 2\n\nWhat happens when you try to `pop` from an empty array? Create an empty array and see how chrome responds to this.\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/book-a-js-arrays/01"
                },
                {
                  "title": "# Array Methods",
                  "shortTitle": "02",
                  "contentMd": "# Array Methods\n\nSo far, we've seen how to access, update, add and remove items from an array. We've also encountered some common array methods, including `push`, `pop`, `shift`, `unshift`, and `splice`. But these aren't the only methods you're likely to encounter when working with arrays. Let's take a look at a few more.\n\n## Common array functions and properties\n\n### length\n\n`length` returns how many elements are in the array. This is a property, NOT a function (you can tell because we type `length`, not `length()`. As we've seen, it can (but is almost never) be used to remove elements/clear an array.\n\n~~~\nconst arr14 = [1, 2, 3, 4];\nconsole.log(arr14.length); // 4\nconsole.log(arr14[arr14.length]); // undefined\nconsole.log(arr14[arr14.length - 1]); // 4 - this is a nice way to access the last element of an array when you don't know how many elements are inside it.\n~~~\n\n### slice\n\n`slice` makes a copy of an array. We can use it to copy the entire array, or create a copy of a _subarray_. If we just invoke `slice()` with no arguments, we'll create a copy:\n\n~~~\nconst arr15 = [1, 2, 3, 4];\nconst copy = arr15.slice();\nconsole.log(arr15); // [1,2,3,4];\n~~~\n\nAlternatively, you can pass in two arguments to `slice`. Like `splice`, the first argument indicates the starting index of the subarray you want. The second argument indicates the ending index. The subarray you get will consist of all the values starting from the starting index and going up to (but **not including**) the ending index:\n\n~~~\nconst arr16 = [7, 6, 5, 4, 3, 2];\nconst copya = arr16.slice(1, 2);\nconsole.log(copya); // [6]\nconst copyb = arr16.slice(2, 5);\nconsole.log(copyb); // [5, 4, 3]\nconst copyc = arr16.slice(2, 1);\nconsole.log(copyc); // []\n~~~\n\n### concat\n\n`concat` joins two arrays together.\n\n~~~\nconst arr18 = [1, 2, 3];\nconst arr19 = [4, 5, 6];\nconst combined1 = arr18.concat(arr19);\nconsole.log(combined1); // [1,2,3,4,5,6]\n~~~\n\nIn fact, you can pass multiple arrays into `concat` and it will still return a single array to you:\n\n~~~\nconst arr20 = ['a', 'b', 'c'];\nconst arr21 = ['d', 'e', 'f'];\nconst arr22 = ['g', 'h', 'i'];\nconst combined2 = arr20.concat(arr21, arr22);\nconsole.log(combined2); // ['a','b','c','d','e','f','g','h','i'];\n~~~\n\nWhat's more, you don't even need to pass an array into `concat`! Any comma-separated list of values can be concatenated with the original array:\n\n~~~\nconst openingWords = ['It', 'was', 'a'];\nconst moreOpeningWords = openingWords.concat('dark', 'and', 'stormy', 'night');\nconsole.log(moreOpeningWords); // ['It', 'was', 'a', 'dark', 'and', 'stormy', 'night']\n~~~\n\n### join\n\n`join` joins elements of an array into a string separated by whatever you pass in as an argument to `join`. This argument is frequently referred to as a _delimiter_. Here are a couple of examples:\n\n~~~\nconst arr23 = ['Hello', 'World'];\nconst combined3 = arr23.join(' '); // 'Hello World'\nconsole.log(combined3);\n\nvar arr24 = ['I', 'have', 'a', 'big', 'announcement'];\nconst combined4 = arr24.join('! ') + '!'; // 'I! have! a! big! announcement!'\nconsole.log(combined4);\n~~~\n\n### indexOf\n\n`indexOf` finds the first index of the element passed in (starting from the left). If the element is _not_ found, it returns -1\\. Here are some examples:\n\n~~~\nconst arr25 = [1, 2, 3, 4, 5, 4, 4];\nconsole.log(arr25.indexOf(2)); // 1\nconsole.log(arr25.indexOf(3)); // 2\nconsole.log(arr25.indexOf(1)); // 0 - remember, arrays are zero indexed\nconsole.log(arr25.indexOf(4)); // 3 - indexOf stops once it finds the first 4.\nconsole.log(arr25.indexOf(10)); // -1\n~~~\n\nYou'll see this function very commonly used to check if an element is in an array or not. Here's an example:\n\n~~~\nconst moviesIKnow = [\n  'Waynes World',\n  'The Matrix',\n  'Anchorman',\n  'Bridesmaids',\n];\n\nconst yourFavoriteMovie = prompt('Whats your favorite movie?');\nif (moviesIKnow.indexOf(yourFavoriteMovie) > -1) {\n  alert('Oh, cool, Ive heard of ' + yourFavoriteMovie + '!');\n} else {\n  alert('I havent heard of ' + yourFavoriteMovie + '. Ill check it out.');\n}\n~~~\n\n### lastIndexOf\n\n`lastIndexOf` works just like `indexOf`, but starts searching from the end of the array rather than the beginning.\n\n~~~\nconst arr26 = [1, 2, 3, 4, 5, 4, 4];\nconsole.log(arr26.indexOf(4)); // 3\nconsole.log(arr26.lastIndexOf(4)); // 6 - this one is different now as it starts from the end!\nconsole.log(arr26.lastIndexOf(10)); // -1 - still returns -1 if the value is not found in the array\n~~~\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-02.html\n- arrays-02.js\n\nAnd use the developer tools in chrome to run and monitor the script.\n\n## arrays-02.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-02.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\n## Exercise 1:\n\nIn arrays-02.js, declare an empty array called me like this:\n\n~~~\nconst me = [];\n~~~\n\nAfter writing code for each of the steps below, print out the `me` array like this:\n\n~~~\nconsole.log(me);\n~~~\n\n- Add your first name to the `me` variable\n- Add your last name to the end of the `me` variable\n- Add your favorite color to the beginning of the `me` variable\n- Remove the favorite color from the `me` variable.\n- Create another array called `other`.\n- Add your favorite number to `other`\n- Add the string \"JavaScript\" to the end of the `other` variable\n\n## Exercise 2:\n\nDeclare the following array: \n\n~~~\nconst programming = ['JavaScript', 'Python', 'Ruby', 'Java']\n~~~\n\nThen write the code to do this:\n\n- Create a new array `modernProgramming`, which combines `programming` with the array `['Haskell', 'Clojure']`.\n- Return the string `'JavaScript, Python, Ruby, Java'` by using `join` on the `programming` array.\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/book-a-js-arrays/02"
                },
                {
                  "title": "# Array Iteration: for",
                  "shortTitle": "03",
                  "contentMd": "# Array Iteration: for\n\nVery often, you'll want to access each element of an array in order and do something with each element. For example, maybe you have an array of tweets, and you want to show each one on the page. Or maybe you have a list of numbers that you want to apply some mathematical operation to.\n\nFor instance, suppose you have an array of numbers that you want to round to the nearest whole number:\n\n~~~\nconst decimals = [1.1, 1.6, 2.8, 0.4, 3.5, 1.6];\n~~~\n\nOne way to do this is to round each element individually using the built-in `Math.round` function:\n\n~~~\ndecimals[0] = Math.round(decimals[0]);\ndecimals[1] = Math.round(decimals[1]);\ndecimals[2] = Math.round(decimals[2]);\ndecimals[3] = Math.round(decimals[3]);\ndecimals[4] = Math.round(decimals[4]);\ndecimals[5] = Math.round(decimals[5]);\n~~~\n\nNow if you look at `decimals`, you should see that it is equal to `[1, 2, 3, 0, 4, 2]`. Great! We've rounded all of our numbers.\n\nBut this approach isn't great. What if we have 100 numbers we want to round? Or 1,000? And what if we want to do something more complicated than simply round each one? The approach we've used here doesn't scale very well.\n\nThankfully, there's a better way to make your way through an array and do something with each element, through a process called _iteration_, or looping. Let's talk about iteration in general, and then see how we can apply it to arrays.\n\n## Iteration: For loops\n\nOne of the most common ways to loop is with a `for` loop. A `for` loop consists of three parts followed by a block of code inside of curly braces `{}`:\n\n`for (initializer, condition, counter) {}`\n\n`initializer` - this is where we can declare variables to be used in the loop. We usually declare a variable called `i` which will serve as a counter variable for the number of times that we should loop.\n\n`condition` - this MUST be an expression that returns `true` or `false`. You can read this condition as \"Keep looping as long as this condition is true.\"\n\n`counter` - this is how we change the variables initialized (typically, either by increasing or decreasing them). We commonly increment variables by 1 using the `++` operator and decrement by 1 using `--`.\n\nAs long as the condition is true, the code inside the curly braces will run. After running, the counter expression will run, and then the condition will be checked again.\n\n~~~\n// start with a variable called i and set it to 0\n// keep looping as long as i is less than 5\n// at the end of each for loop, increase the value of i\nfor (let a = 0; a < 5; a++) {\n  console.log(a);\n}\n\n// prints out:\n\n// 0\n// 1\n// 2\n// 3\n// 4\n~~~\n\nWhat gets logged if you change `i<5` to `i<10`? If you change `i++` to `i+=3`? Experimenting with the initializer, condition, and counter is a great way to develop your intuition for `for` loops!\n\nYou can use a loop to iterate through an array in a similar fashion. In this case, typically `i` refers to the current index in the array, the `condition` tells the loop to continue until `i` equals the length of the array, and the `counter` increments `i`. Let's see how we could refactor our earlier rounding example to use a for loop:\n\n~~~\nconst decimals2 = [1.1, 1.6, 2.8, 0.4, 3.5, 1.6];\n\nfor (let i = 0; i < decimals2.length; i++) {\n    decimals2[i] = Math.round(decimals[i]);\n}\n~~~\n\n\n## Strings Revisited\n\nNow that we've learned about arrays, let's briefly return to strings and compare and contrast these two data types. They do have some similarities, but it's important to understand their differences as well.\n\n#### Looping over strings\n\nJust like we can iterate over arrays (and objects), we can also iterate over strings! Since strings have a `length` property, we always know at what point to stop looping, just like with arrays. Let's see an example of looping over a string:\n\n~~~\nconst name = 'elie';\n\nfor (let t = 0; t < name.length; t++) {\n  console.log(name[t]);\n}\n\n// e\n// l\n// i\n// e\n~~~\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-03.html\n- arrays-03.js\n\nAnd use the developer tools in chrome to run and monitor the script.\n\n## arrays-03.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-03.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\n## Exercises 1: Array iteration\n\nIntroduce this array:\n~~~\nconst people = ['Greg', 'Mary', 'Devon', 'James'];\n~~~\n\n- Using a loop, iterate through this array and console.log all of the people.\n- Again using a loop, iterate in the reverse direction, logging the people starting at 'James' and finishing with 'Greg'\n\n## Exercises 1: Array mutation.\n\nUsing the same array as in exercise 1:\n\n- Write the code to remove \"Greg\" from the array.\n- Write the code to remove \"James\" from the array.\n- Write the code to add \"Matt\" to the front of the array.\n- Write the code to add your name to the end of the array.\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/book-a-js-arrays/03"
                },
                {
                  "title": "# Array Iteration: While loops",
                  "shortTitle": "04",
                  "contentMd": "# Array Iteration: While loops\n\nAlong with `for` loops, we can also use a `while` loop. Unlike `for` loops, `while` loops only take a `condition`. This means that you need to handle initialization before the loop, and incrementing/decrementing yourself inside of the loop. If you forget to increment/decrement inside the loop, the loop will never terminate! Instead, you'll be stuck in what's called an _infinite loop_!\n\nHere's an example of a working `while` loop:\n\n~~~\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}\n~~~\n\nHere's how we could rewrite our rounding example to use a `while` loop:\n\n~~~\nlet decimals3 = [1.1, 1.6, 2.8, 0.4, 3.5, 1.6];\nlet j = 0;\n\nwhile (j < decimals.length) {\n  decimals3[j] = Math.round(decimals[j]);\n  j++;\n}\n~~~\n\n### Iteration: Do While Loops\n\nSimilar to while loops, we can also write `do...while` loops, which specify our `condition` at the end. Here is an example:\n\n~~~\nlet k = 0;\ndo {\n  console.log(k);\n  k++;\n} while (k < 5);\n~~~\n\nThe main difference between a `while` loop and a `do...while` loop is that the code inside of a `do...while` loop is guaranteed to execute at least once. For example:\n\n~~~\nlet m = 0;\nwhile (m < 0) {\n  console.log(m);\n  m++;\n}\n\n// nothing is logged, since 0 < 0 is false\n\nlet n = 0;\ndo {\n  console.log(n);\n  n++;\n} while (n < 0);\n\n// 0 gets logged, since the code inside the block runs once\n// before the while condition is checked\n~~~\n\nHere's how we could rewrite our rounding example to use a `do...while` loop:\n\n~~~\nconst decimals4 = [1.1, 1.6, 2.8, 0.4, 3.5, 1.6];\nvar p = 0;\n\ndo {\n  decimals4[p] = Math.round(decimals4[p]);\n  p++;\n} while (p < decimals4.length);\n~~~\n\n### Exiting out of loops\n\nSometimes we want to exit a loop before it has finished. To do that, we use the word `break`\n\n~~~\nfor (let q = 0; q < 5; q++) {\n  if (Math.random() > 0.5) {\n    console.log('Breaking out of the loop when q is ' + q);\n    break;\n  }\n  else {\n    console.log(i);\n  }\n}\n~~~\n\nWe can also skip the current iteration and continue the loop at the next step in the itration by using the word `continue`\n\n~~~\nfor (let r = 0; r < 5; r++) {\n  if (Math.random() > 0.5) {\n    console.log('Skipping the console.log when i is ' + r);\n    continue;\n  }\n  console.log(i);\n}\n~~~\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-04.html\n- arrays-04.js\n\nAnd use the developer tools in chrome to run and monitor the script.\n\n## arrays-04.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-04.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n# Exercise 1: Iteration\n\nUsing this array:\n\n~~~\nconst people = ['Greg', 'Mary', 'Devon', 'James'];\n~~~\n\n- Using a loop, iterate through `people` array and after logging \"Mary\", exit from the loop.\n- Write code to make a copy of the array\n- Write the code that gives the index of where \"Mary\" is located.\n- Write the code that gives the index of where \"Foo\" is located (this should return `-1`).\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/book-a-js-arrays/04"
                },
                {
                  "title": "# Arrays of Objects",
                  "shortTitle": "05",
                  "contentMd": "# Arrays of Objects\n\nCreate a file called `arrays3.js` declare this array:\n\n~~~\nconst songList = [\n  'Piano Sonata No. 3',\n  'Piano Sonata No. 7',\n  'Piano Sonata No. 10',\n];\n\nconsole.log(songList);\n~~~\n\nWe can write a loop to print out the elements individually:\n\n~~~\nfor (let i = 0; i < songList.length; i++) {\n  console.log('Song ' + i + ':' + songList[i]);\n}\n~~~\n\nThis should render as:\n\n~~~\nSong 0:Piano Sonata No. 3\nSong 1:Piano Sonata No. 7\nSong 2:Piano Sonata No. 10\n~~~\n\nWhat if we wanted to record both the song and the artist? We could try this:\n\n~~~\nconst songList2 = [\n  'Piano Sonata No. 3',\n  'Beethoven',\n  'Piano Sonata No. 7',\n  'Beethoven',\n  'Piano Sonata No. 10',\n  'Beethoven',\n];\n\nfor (let k = 0; k < songList2.length; k++) {\n  console.log('Song ' + k + ':' + songList2[k]);\n}\n~~~\n\nThis code outputs the array to the console like this:\n\n~~~\nSong 0:Piano Sonata No. 3\nSong 1:Beethoven\nSong 2:Piano Sonata No. 7\nSong 3:Beethoven\nSong 4:Piano Sonata No. 10\nSong 5:Beethoven\n~~~\n\nHowever, this is very inconvenient and difficult to manage. The output above does not really represent our intention. We could try this:\n\n~~~\nfor (let k = 0; k < songList2.length; k=k+2) {\n  console.log('Song ' + k + ': Title: ' + songList2[k] + ': Artist: ' + songList2[k + 1]);\n}\n~~~\n\nWhich outputs:\n\n~~~\nSong 0: Title: Piano Sonata No. 3: Artist: Beethoven\nSong 2: Title: Piano Sonata No. 7: Artist: Beethoven\nSong 4: Title: Piano Sonata No. 10: Artist: Beethoven\n~~~\n\nCloser to our intention - but still not satisfactory (the Song numbers look wrong).\n\nInstead of an array of strings, we need an array of `songs`, with each song containing a title + artist:\n~~~\n\nconst songList3 = [\n  {\n    title: 'Piano Sonata No. 3',\n    artist: 'Beethoven',\n  },\n  {\n    title: 'Piano Sonata No. 7',\n    artist: 'Beethoven',\n  },\n  {\n    title: 'Piano Sonata No. 10',\n    artist: 'Beethoven',\n  },\n];\n~~~\n\nLook carefully at the above - we are defining an array as before, but each array is an object containing two fields:\n\n- title\n- artist\n\nWe can now output the play list more conveniently:\n\n~~~\nfor (let j = 0; j < songList3.length; j++) {\n  console.log('Song ' + j + ': Title: ' + songList3[j].title + ': Artist: ' + songList3[j].artist);\n}\n~~~\n\nNote how we access each element:\n\n~~~\nsongList3[j].title  ... songList3[j].artist\n~~~\n\nEach element is an object, so we can access each attribute using '.' and then the name of the attribute.\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-05.html\n- arrays-05.js\n\nUse this contents for the html file:\n\n## arrays-05.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-05.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\n## Exercise 1: \n\nExtend songList3 to include a 'duration' field for each song. This should be a simple number. Have the this number included in the log when the list is printed out.\n\n## Exercise 2:\n\nOutput the total number of songs when all song details have been printed out.\n\n## Exercise 3:\n\nAlong with the total number of songs, see if you can also print out the total duration. This should be a simple total of the duration of all individual songs.\n\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/book-a-js-arrays/05"
                },
                {
                  "title": "# Nested Arrays",
                  "shortTitle": "06",
                  "contentMd": "# Nested Arrays\n\nHere is a more complex datastructure, representing multiple playlists:\n\n~~~js\nconst playlistCollection = [\n  {\n    id: \"01\",\n    title: \"Beethoven Sonatas\",\n    songs: [\n      {\n        id: \"04\",\n        title: \"Piano Sonata No. 3\",\n        artist: \"Beethoven\",\n      },\n      {\n        id: \"05\",\n        title: \"Piano Sonata No. 7\",\n        artist: \"Beethoven\",\n      },\n      {\n        id: \"06\",\n        title: \"Piano Sonata No. 10\",\n        artist: \"Beethoven\",\n      }\n    ]\n  },\n  {\n    id: \"02\",\n    title: \"Beethoven Concertos\",\n    songs: [\n      {\n        id: \"07\",\n        title: \"Piano Concerto No. 0\",\n        artist: \"Beethoven\",\n      },\n      {\n        id: \"08\",\n        title: \"Piano Concerto No. 4\",\n        artist: \"Beethoven\",\n      },\n      {\n        id: \"09\",\n        title: \"Piano Concerto No. 6\",\n        artist: \"Beethoven\",\n      }\n    ]\n  },\n  {\n    id: \"03\",\n    title: \"Beethoven Variations\",\n    songs: [\n      {\n        id: \"10\",\n        title: \"Opus 34: Six variations on a theme in F major\",\n        artist: \"Beethoven\",\n      },\n      {\n        id: \"11\",\n        title: \"Opus 120: Thirty-three variations on a waltz by Diabelli in C majo\",\n        artist: \"Beethoven\",\n      }\n    ]\n  }\n];\n~~~\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-06.html\n- arrays-06.js\n\nUse this contents for the html file:\n\n## arrays-06.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-06.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\n## Exercise 1: \n\nTry the following - and observe the output in the console:\n\n~~~\nconsole.log (playlistCollection);\n~~~\n\n## Exercise 2: \n\nComment out the above, and try this instead:\n\n~~~\nfor (let i = 0; i < playlistCollection.length; i++) {\n  console.log(playlistCollection[i]);\n}\n~~~\n\nCompare the output form this with the previous version.\n\n## Exercise 3:\n\nComment out the above, and try this instead:\n\n~~~\nfor (let i = 0; i < playlistCollection.length; i++) {\n  console.log(playlistCollection[i].title)\n}\n~~~\n\nCompare the output form this with the previous version.\n\n## Exercise 4:\n\nThese last two are more complex - try each on in turn and compare the console output:\n\n~~~~\nfor (let i = 0; i < playlistCollection.length; i++) {\n  console.log(playlistCollection[i].title)\n  for (let j=0; j < playlistCollection[i].songs.length; j++) {\n    console.log(playlistCollection[i].songs[j]);\n  }\n}\n~~~~\n\n~~~\nfor (let i = 0; i < playlistCollection.length; i++) {\n  console.log(playlistCollection[i].title)\n  for (let j=0; j < playlistCollection[i].songs.length; j++) {\n    console.log(playlistCollection[i].songs[j].title);\n    console.log(playlistCollection[i].songs[j].artist);\n  }\n}\n~~~\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/unit-1/book-a-js-arrays/06"
                }
              ]
            }
          ]
        },
        {
          "title": "02: Javascript Arrays ",
          "type": "panelvideo",
          "summary": "02: Javascript Arrays",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/panelvideo/",
          "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/panelvideo/doTi4_51VR8",
          "id": "panelvideo",
          "route": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-02-arrays/panelvideo/doTi4_51VR8",
          "hide": false
        }
      ]
    },
    {
      "title": "3: Web Applications ",
      "type": "topic",
      "summary": "Build your first Glitch app, a simple static playlist web site.",
      "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/topic.png",
      "id": "topic-03-web-apps",
      "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps",
      "hide": false,
      "los": [
        {
          "title": "Play Gym Web App ",
          "type": "unit",
          "summary": "",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-1/talk-1-gym-v1-solution/gym-web.png",
          "id": "unit-1",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/",
          "hide": false,
          "los": [
            {
              "title": "Assignment 2 Solution: PlayGymWeb ",
              "type": "talk",
              "summary": "A detailed walkthtough of the Solution to the PlayGymWeb assignment",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-1/talk-1-gym-v1-solution/gym-web.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-1/talk-1-gym-v1-solution/wGFbDk4DfCg",
              "id": "talk-1-gym-v1-solution",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-1/talk-1-gym-v1-solution/gym-web.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-1/talk-1-gym-v1-solution/gym-web.pdf"
            },
            {
              "title": "03a: Play Gym Web Solution ",
              "type": "panelvideo",
              "summary": "03a: Play Gym Web Solution",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-1/panelvideo/",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-1/panelvideo/PDAcA5VMG1g",
              "id": "panelvideo",
              "route": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-1/panelvideo/PDAcA5VMG1g",
              "hide": false
            },
            {
              "title": "PlayGymWeb Repo ",
              "type": "github",
              "summary": "A sample solution to the Web Development Assignment 2: PlayGymWeb",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-1/github-play-gym-web/github.jpg",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-1/github-play-gym-web/AZ-seW3gfaw",
              "id": "github-play-gym-web",
              "route": "https://github.com/wit-hdip-comp-sci-2019/play-gym-web",
              "hide": false
            }
          ]
        },
        {
          "title": "Playlist 1 ",
          "type": "unit",
          "summary": "",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-3-web-app-intro/web-app-intro.png",
          "id": "unit-2",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/",
          "hide": false,
          "los": [
            {
              "title": "Web App Introduction ",
              "type": "talk",
              "summary": "Structure of a web app: Front-end Vs Backend. Routers, Models, Views, Controllers",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-3-web-app-intro/web-app-intro.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-3-web-app-intro/OS7IHd8W98U",
              "id": "talk-3-web-app-intro",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-3-web-app-intro/web-app-intro.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-3-web-app-intro/web-app-intro.pdf"
            },
            {
              "title": "Front-end ",
              "type": "talk",
              "summary": "Views: Handlebars layouts, partials and templates",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-4-front-end/front-end.jpg",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-4-front-end/hh5kvZ9oUF0",
              "id": "talk-4-front-end",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-4-front-end/front-end.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-4-front-end/front-end.pdf"
            },
            {
              "title": "Modules ",
              "type": "talk",
              "summary": "The backend will use a modular approach, relying on specific mechanism to import/export shared objects",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-5-modules/modules.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-5-modules/f7I5RMkaoGQ",
              "id": "talk-5-modules",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-5-modules/modules.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-5-modules/modules.pdf"
            },
            {
              "title": "Back-end ",
              "type": "talk",
              "summary": "Server, routes + controllers",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-6-back-end/back-end.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-6-back-end/Zz5fIVOKFC8",
              "id": "talk-6-back-end",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-6-back-end/back-end.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/talk-6-back-end/back-end.pdf"
            },
            {
              "title": "Lab-4 Playlist 1",
              "type": "lab",
              "summary": "Import and run a new starter project. Extend this project to include multiple 'views'. Explore the handlebars templating library.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/img/main.jpg",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/LKZk7mqk6Jc",
              "id": "book-a-glitch-playlist-1",
              "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1",
              "hide": false,
              "los": [
                {
                  "title": "# Objectives",
                  "shortTitle": "Lab-4 Playlist 1",
                  "contentMd": "# Objectives\n\nImport and run a new starter project. Extend this project to include multiple 'views'. Explore the handlebars templating library.\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/Lab-4 Playlist 1"
                },
                {
                  "title": "# Template 1",
                  "shortTitle": "01",
                  "contentMd": "# Template 1\n\nCreate a new project in Glitch - instead of selecting a project template, press the 'Clone from Git Repo' button:\n\n![](img/01x.png)\n\nIn the subsequent dialog, enter this repo url:\n\n~~~bash\nhttps://github.com/wit-hdip-comp-sci-2019/glitch-template-1\n~~~\n\n![](img/02x.png)\n\nPress ok to import the project.\n\n![](img/05x.png)\n\nOccasionally, the import process will stall, and the above perspective will not appear correctly. If this happens, the simplest option is to:\n\n- Delete the current (partially imported project) \n\n![](img/07x.png)\n\n- Select 'Back to Glitch':\n\n![](img/08x.png)\n\nAnd then proceed to clone from github again as above. The anomaly that caused the stall will usually not occur twice in a row.\n\nNow, select Tools->Logs (a button along the end of the screen), and turn on logs:\n\n![](img/03x.png)\n\nNow press the 'Show' button - which should reveal the application running:\n\n![](img/04x.png)\n\nExplore the (small) number of views.\n\nNow examine all of the sources files. There will be errors reported in 2 files:\n\n- views/about.hbs\n- views/dashboard.hbs\n\n![](img/21.png)\n\nIgnore these particular errors for the moment. They are related to an over zealous code formatter, which we haven't figured out how to disable yet.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/01"
                },
                {
                  "title": "# Playlist",
                  "shortTitle": "02",
                  "contentMd": "# Playlist\n\nWe are going to evolve this project into a simple playlist appication, enabling a user to create a playlist of songs. In this step, we will layout a static version.\n\nFirst, we can make some simple changes to re brand the app as `Playlist 1` instead of `Template 1`\n\nFirst replace the existing corresponding lines of code with each of the following in the views:\n\n## views/partials/menu.hbs\n\n~~~html\n...\n  <header class=\"ui header item\"> Playlist 1 </header>\n...\n~~~\n\n## views/about.hbs\n\n~~~html\n...\n  <h3>\n    Playlist 1\n  </h3>\n  <p>\n    A Little Playlist Maker - Version 1\n  </p>\n...\n~~~\n\nNow the controllers - adjust the viewData objects as shown:\n\n## controllers/about.js\n\n~~~javascript\n...\n    const viewData = {\n      title: 'About Playlist 1'\n    };\n...\n~~~\n\n## controllers/dashboard.js\n\n~~~javascript\n...\n    const viewData = {\n      title: 'Playlist 1 Dashboard'\n    };\n...\n~~~\n\nMake sure the app is still running, but with the new branding. If there are errors, turn the logs and you may be able to see the source of the problem - which will usually be some small error in the javascript sources.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/02"
                },
                {
                  "title": "# Static Playlist",
                  "shortTitle": "03",
                  "contentMd": "# Static Playlist\n\nIn this step we will start to display the playlist itself. First, create a new partial called `listsongs.hbs`:\n\n## views/partials/listsongs.hbs\n\n~~~html\n<table class=\"ui table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n      </td>\n      <td>\n      </td>\n    </tr>\n  </tbody>\n</table>\n~~~\n\nMake sure you include the folder name in the full file name when creating this file:\n\n![](img/10x.png)\n\n![](img/11.png)\n\nThen press 'Add File'. The file can be edited now - paste the listsongs.hbs template source in  now.\n\n![](img/11x.png)\n\nReplace the contents of dashboard.hbs with the following:\n\n## views/dashboard.hbs\n\n~~~html\n{{> menu id=\"dashboard\"}}\n\n<section class=\"ui segment\">\n  <h2 class=\"ui header\">\n    Playlist Title\n  </h2>\n  {{> listsongs}}\n</section>\n~~~\n\nMake sure the app runs successfully - the dashboard should look like this:\n\n![](img/22.png)\n\nTo test out the UX, we might include some actual songs (replace the tbody with the following):\n\n## views/partials/listsongs.hbs\n\n~~~html\n<tbody>\n  <tr>\n    <td>\n      Piano Sonata No. 3\n    </td>\n    <td>\n      Beethoven\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Piano Sonata No. 7\n    </td>\n    <td>\n      Beethoven\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Piano Sonata No. 10\n    </td>\n    <td>\n      Beethoven\n    </td>\n  </tr>\n</tbody>\n~~~\n\n... and also give the playlist a title:\n\n## views/dashboard.hbs\n\n~~~html\n....\n  <h2 class=\"ui header\">\n    Beethoven Sonatas\n  </h2>\n...\n~~~\n\nThe dashboard should look like this:\n\n![](img/23.png)\n\nExercise the UX fully again. Keep an eye on the logs\n\n![](img/24.png)\n\nLocate where in the controllers these messages are being generated:\n\n~~~js\n...\n    logger.info('start rendering');\n...\n~~~\n\nThese logging messages are a useful technique for figuring out what might be going wrong with an app. There are three variants of the logging statement: `info`, `error` and `debug`. Experiment now with some of these, and exercise the app to make sure the log messages appear.\n\n~~~js\n...\n    logger.error('some error has occurred');\n...\n~~~\n\n~~~js\n...\n    logger.debug('some step has occurred...');\n...\n~~~\n\nError and debug messages may appear in red. You might need to open the `source` and `run` views of the app in side by side windows to get a clearer view of the logs.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/03"
                },
                {
                  "title": "# Dynamic Playlist",
                  "shortTitle": "04",
                  "contentMd": "# Dynamic Playlist\n\nThe app as we have it now could have been completely built as a static web site. However, the framework and tools we have used in this version enable us to evolve this static site into an interactive web app.\n\nThe first step is to eliminate some of the static content from the listsongs partial. In  listsongs.hbs replace the table with the following):\n\n## views/partials/listsongs.hbs\n\n~~~html\n<table class=\"ui table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#each playlist.songs}}\n      <tr>\n        <td>\n          {{title}}\n        </td>\n        <td>\n          {{artist}}\n        </td>\n      </tr>\n    {{/each}}\n  </tbody>\n</table>\n~~~\n\nIn the above, we are `iterating` over an `array` of `songs` inside a `playlist` object:\n\n~~~html\n{{#each playlist.songs}}\n  <tr>\n    <td>\n      {{title}}\n    </td>\n    <td>\n      {{artist}}\n    </td>\n  </tr>\n{{/each}}\n~~~\n\nThis playlist object must be passed to the view for this to work.\n\nIn the `dashboard.js` controller, we can define a playlist object in Javascript (place this definition prior to the dashboard object definition):\n\n## controllers/dashboard.js\n\n~~~js\n...\nconst sonatas = {\n  title: 'Sonatas',\n  songs: [\n    {\n      title: 'Piano Sonata No. 3',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 7',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 10',\n      artist: 'Beethoven',\n    },\n  ],\n};\n\n...\n~~~\n\nExamine the above structure carefully. This is a javascript `object literal`. It consists of :\n\n- a title field containing the string `Sonatas`\n- an array called `songs`, which contains 3 objects, each of which has:\n    - title\n    - artist\n\nThe index method in dashboard.js file can now be modified to pass this list to the view:\n\n## controllers/dashboard.js\n\n~~~js\n  index(request, response) {\n    logger.info(\"dashboard rendering\");\n     const viewData = {\n       title: 'Playlist 1 Dashboard',\n       playlist: sonatas\n    };\n    response.render(\"dashboard\", viewData);\n  }\n~~~\n\nMake sure the playlist is displayed, showing the contents of the sonatas array:\n\n![](img/25.png)\n\nThis is the complete dashboard module at this stage:\n\n## controllers/dashboard.js\n\n~~~\n\"use strict\";\n\nconst logger = require(\"../utils/logger\");\n\nconst sonatas = {\n  title: 'Sonatas',\n  songs: [\n    {\n      title: 'Piano Sonata No. 3',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 7',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 10',\n      artist: 'Beethoven',\n    },\n  ],\n};\n\nconst dashboard = {\n  index(request, response) {\n    logger.info(\"dashboard rendering\");\n     const viewData = {\n       title: 'Playlist 1 Dashboard',\n       playlist: sonatas\n    };\n    response.render(\"dashboard\", viewData);\n  }\n};\n\nmodule.exports = dashboard;\n~~~\n\n## Logs\n\nWe can take advantage of the logger to display the playlist before we render it:\n\n~~~js\nindex(request, response) {\n  logger.info('dashboard rendering');\n  const viewData = {\n    title: 'Playlist Dashboard',\n    playlist: sonatas,\n  };\n  logger.info('about to render', sonatas);\n  response.render('dashboard', viewData);\n},\n~~~\n\nYou should see something like this in the logs:\n\n![](img/26.png)\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/04"
                },
                {
                  "title": "# playlist-store",
                  "shortTitle": "05",
                  "contentMd": "# playlist-store\n\nWe would like to manage the playlists separately from the controller, so that we can eventually introduce multiple playlists.\n\nTo prepare for this, create a new javascript module your app. Call it `playlist-store.js` in a new `models` folder. In Glitch, you can enter a full path, including a new directory when adding a file:\n\n![](img/14.png)\n\n![](img/15.png)\n\n## models/playlist-store.js\n\n~~~js\n'use strict';\n\nconst logger = require('../utils/logger');\n\nconst sonatas = {\n  title: 'Beethoven Sonatas',\n  songs: [\n    {\n      title: 'Piano Sonata No. 3',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 7',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 10',\n      artist: 'Beethoven',\n    },\n  ],\n};\n\nmodule.exports = sonatas;\n~~~\n\nDashboard can then be simplified:\n\n## controllers/dashboard.js\n\n~~~js\n'use strict';\n\nconst logger = require('../utils/logger');\nconst sonatas = require('../models/playlist-store.js');\n\nconst dashboard = {\n  index(request, response) {\n    logger.info('dashboard rendering');\n    const viewData = {\n      title: 'Playlist Dashboard',\n      playlist: sonatas,\n    };\n    logger.info('about to render', sonatas);\n    response.render('dashboard', viewData);\n  },\n};\n\nmodule.exports = dashboard;\n~~~\n\nNotice in the above that we are importing the sonatas from the playlist-store module. Otherwise, the dashboard is unchanged.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/05"
                },
                {
                  "title": "# Multiple playlists",
                  "shortTitle": "06",
                  "contentMd": "# Multiple playlists\n\nHere is a new version of `playlist-store.js`:\n\n## models/playlist-store.js\n\n~~~\n'use strict';\n\nconst logger = require('../utils/logger');\n\nconst sonatas = {\n  title: 'Beethoven Sonatas',\n  songs: [\n    {\n      title: 'Piano Sonata No. 3',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 7',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 10',\n      artist: 'Beethoven',\n    },\n  ],\n};\n\nconst concertos = {\n  title: 'Beethoven Concertos',\n  songs: [\n    {\n      title: 'Piano Concerto No. 0',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Concerto  No. 4',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Concerto  No. 6',\n      artist: 'Beethoven',\n    },\n  ],\n};\n\nconst playlistCollection = [sonatas, concertos];\n\nmodule.exports = playlistCollection;\n~~~\n\nHere we are defining 2 playlists :\n\n- sonatas\n- concertos\n\n... and then an array called `playlistCollection`, which contains these two:\n\n~~~js\nconst playlistCollection = [sonatas, concertos];\n~~~\n\nThis is the object that is then exported:\n\n~~~js\nmodule.exports = playlistCollection;\n~~~\n\nIn a revised dashboard, we import this object, and pass it to the view:\n\n## controllers/dashboard.js\n\n~~~\n'use strict';\n\nconst logger = require('../utils/logger');\nconst playlistCollection = require('../models/playlist-store.js');\n\nconst dashboard = {\n  index(request, response) {\n    logger.info('dashboard rendering');\n    const viewData = {\n      title: 'Playlist Dashboard',\n      playlists: playlistCollection,\n    };\n    logger.info('about to render', playlistCollection);\n    response.render('dashboard', viewData);\n  },\n};\n\nmodule.exports = dashboard;\n~~~\n\nThe dashboard view will have to be rewritten to now display a collection of playlists (we no longer use the listsongs.hbs partial in the dashboard.hbs):\n\n## views/dashboard.hbs\n\n~~~html\n{{> menu id=\"dashboard\"}}\n\n{{#each playlists}}\n  <section class=\"ui segment\">\n    <h2 class=\"ui header\">\n      {{title}}\n    </h2>\n    <table class=\"ui table\">\n      <thead>\n        <tr>\n          <th>Song</th>\n          <th>Artist</th>\n        </tr>\n      </thead>\n      <tbody>\n        {{#each songs}}\n          <tr>\n            <td>\n              {{title}}\n            </td>\n            <td>\n              {{artist}}\n            </td>\n          </tr>\n        {{/each}}\n      </tbody>\n    </table>\n  </section>\n{{/each}}\n~~~\n\nTry this now, making sure you are seeing the two playlists on the dashboard:\n\n![](img/09.png)\n\nLook carefully at `views/dashboard.hbs`, see if you can relate the template to the playlist data structure being passed to to it. Notice that it is performing a nested loop:\n\n- iterating over the playlist array\n\n~~~html\n...\n{{#each playlists}}\n  ...\n{{/each}}\n~~~\n\n- then iterating over each song in a given playlist.\n\n~~~html\n...\n{{#each playlists}}\n  ...\n  {{#each songs}}\n    ...\n  {{/each}}\n  ..\n{{/each}}\n~~~\n\nNotice that `title` means something slightly different in each context\n\n- the title of the playlist\nOR\n- the title of a song\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/06"
                },
                {
                  "title": "# Introducing JSON",
                  "shortTitle": "07",
                  "contentMd": "# Introducing JSON\n\nIn javascript, it can sometimes be very convenient to use a notation to represent a data structure, but without any additional javascript constructs. Javascript Object Notation (JSON) is designed for this purpose. Here is a new file to represent our playlists in JSON format, create it in your app now:\n\n## models/playlist-store.json\n\n~~~js\n{\n  \"playlistCollection\": [\n    {\n      \"title\": \"Beethoven Sonatas\",\n      \"songs\": [\n        {\n          \"title\": \"Piano Sonata No. 3\",\n          \"artist\": \"Beethoven\"\n        },\n        {\n          \"title\": \"Piano Sonata No. 7\",\n          \"artist\": \"Beethoven\"\n        },\n        {\n          \"title\": \"Piano Sonata No. 10\",\n          \"artist\": \"Beethoven\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Beethoven Concertos\",\n      \"songs\": [\n        {\n          \"title\": \"Piano Concerto No. 0\",\n          \"artist\": \"Beethoven\"\n        },\n        {\n          \"title\": \"Piano Concerto No. 4\",\n          \"artist\": \"Beethoven\"\n        },\n        {\n          \"title\": \"Piano Concerto No. 6\",\n          \"artist\": \"Beethoven\"\n        }\n      ]\n    }\n  ]\n}\n~~~\n\nWe consider this to be a data file rather than a program. Although it looks superficially like javascript, you cannot put control structures, functions or other constructs in it. Also, the format is very strict, so the use of double quotes and separator commas is very precise. Any deviation will generate an error in any program that attempts to read it.\n\nWe can revise `playlist-store.js` to read this file now:\n\n## models/playlist-store.js\n\n~~~js\n'use strict';\n\nconst playlistCollection = require('./playlist-store.json').playlistCollection;\n\nmodule.exports = playlistCollection;\n~~~\n\nThe program should behave exactly as before.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/07"
                },
                {
                  "title": "# Exercises & Archives",
                  "shortTitle": "Exercises",
                  "contentMd": "# Exercises & Archives\n\nIf you want to download a complete version of the app as it should be at the end of this lab, then create a new Glith project by cloning this repo:\n\n- https://github.com/wit-hdip-comp-sci-2019/playlist-1\n\n## Exercise 1: Review the JSON file format\n\nLook again at the playlist as represented in:\n\n- Step 6: Javascript Object Literal\n- Step 7: JSON\n\nReview the differences carefully.\n\n## Exercise 2: Add a new playlist\n\nExtend the JSON file to include an additional playlist - so that three playlists are displayed on the dashboard.\n\n## Exercise 3: Introduce IDs\n\nWhen manipulating data maintained in JSON, or other external format, each object will often require an ID in order to manipulate the information effectively. Introduce an ID for every playlist and every song, now.\n\nFor instance for a playlist:\n\n~~~js\n\"playlistCollection\": [\n   {\n     \"id\": \"01\",\n     \"title\": \"Beethoven Sonatas\",\n     \"songs\": [\n~~~\n\n... and for a song:\n\n~~~\n{\n  \"id\": \"03\",\n  \"title\": \"Piano Sonata No. 3\",\n  \"artist\": \"Beethoven\"\n},\n~~~\n\nPlace unique IDs on all your playlists and songs now. You can use any unique numbers (enclosed in double quotes) for the moment.\n\n## Exercise 4: New Fields\n\nExtend the playlist to have new entry called `duration`. Also, extend each song to also have a `duration` field + a `genre` field.\n\nModify the dashboard view to display these new fields.\n\n## Exercise 4: \n\nExtend the following views:\n\n- Welcome: Extend the welcome view to contain a more detailed outline of the purpose of the application\n- About: Extend the about view to provide contact details (may be fictitious) for the author/company that created the app.\n\n## Exercise 5: Run Locally\n\nDownload the app and run it on your own workstation. Instructions for doing this are in Lab-1, Step 4.\n\n- <https://wit-hdip-comp-sci-2019.github.io/ictskills-1/topic-00-module-overview/unit-1/book-a-glitch-intro/index.html#/04>\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/Exercises"
                }
              ]
            },
            {
              "title": "03b: Glitch Web Application Introduction ",
              "type": "panelvideo",
              "summary": "03b: Glitch Web Application Introduction",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/panelvideo/",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/panelvideo/5GBwQ2GuFlo",
              "id": "panelvideo",
              "route": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-03-web-apps/unit-2/panelvideo/5GBwQ2GuFlo",
              "hide": false
            }
          ]
        }
      ]
    },
    {
      "title": "4: Templates & Routes ",
      "type": "topic",
      "summary": "Explore templating in more detail. Enhanced the routing behaviour",
      "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-0/talk-a-templates/templates.png",
      "id": "topic-04-app-templates+views",
      "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views",
      "hide": false,
      "los": [
        {
          "title": "Views, templating + JSON Models ",
          "type": "unit",
          "summary": "",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-0/talk-a-templates/templates.png",
          "id": "unit-0",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/",
          "hide": false,
          "los": [
            {
              "title": "Templates ",
              "type": "talk",
              "summary": "Templates enable dynamic composition of views from layouts, partials and expressions.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-0/talk-a-templates/templates.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-0/talk-a-templates/bGR2kfeS4PA",
              "id": "talk-a-templates",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-0/talk-a-templates/templates.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-0/talk-a-templates/templates.pdf"
            },
            {
              "title": "Json ",
              "type": "talk",
              "summary": "JSON is notation for representing javascript objects in a simple literal format.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-0/talk-b-templates+json/templates+json.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-0/talk-b-templates+json/FkFNAwl_QCA",
              "id": "talk-b-templates+json",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-0/talk-b-templates+json/templates+json.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-0/talk-b-templates+json/templates+json.pdf"
            }
          ]
        },
        {
          "title": "Controller, Routes & Models ",
          "type": "unit",
          "summary": "Controller, Routes & Models",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-c-dashboard/dashboard.png",
          "id": "unit-1",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/",
          "hide": false,
          "los": [
            {
              "title": "Dashboard ",
              "type": "talk",
              "summary": "Review thee dashboard controller in detail.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-c-dashboard/dashboard.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-c-dashboard/Q5WPB0WcAOw",
              "id": "talk-c-dashboard",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-c-dashboard/dashboard.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-c-dashboard/dashboard.pdf"
            },
            {
              "title": "Playlist ",
              "type": "talk",
              "summary": "Revise the Dashboard to render playlist without their contents. Use a new playlist view renders individual playlists",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-d-playlist/playlist.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-d-playlist/WQ3p7uQl_wU",
              "id": "talk-d-playlist",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-d-playlist/playlist.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-d-playlist/playlist.pdf"
            },
            {
              "title": "MVC ",
              "type": "talk",
              "summary": "Explore the MVC Pattern in action in Playlist 2",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-e-mvc/mvc.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-e-mvc/msWsxn1sffM",
              "id": "talk-e-mvc",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-e-mvc/mvc.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/talk-e-mvc/mvc.pdf"
            },
            {
              "title": "Lab-5 Playlist 2",
              "type": "lab",
              "summary": "Refactor the dashboard controller to show summary on of the playlists + link to show playlist details.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/img/main.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/T3JfDS05FG4",
              "id": "book-a-playlist-2",
              "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2",
              "hide": false,
              "los": [
                {
                  "title": "# Objectives",
                  "shortTitle": "Lab-5 Playlist 2",
                  "contentMd": "# Objectives\n\nRefactor the dashboard controller to show summary on of the playlists + link to show playlist details.\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/Lab-5 Playlist 2"
                },
                {
                  "title": "# Exercise Solutions",
                  "shortTitle": "Exercise Solutions",
                  "contentMd": "# Exercise Solutions\n\nThis lab requires that the `playlist-1` lab be completed. If you have lost your solution, create a new project in Glitch by cloning this repo:\n\n- <https://github.com/wit-hdip-comp-sci-2019/playlist-1>\n\nInstructions on how to do this are [here](https://tutors.design/lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com/topic-03-web-apps/unit-2/book-a-glitch-playlist-1/01). Remember to use the url above.\n\nThese are three exercises from the last lab:\n\n## Exercise 2: Add a new playlist\n\nExtend the JSON file to include an additional playlist - so that three playlists are displayed on the dashboard.\n\n## Exercise 3: Introduce IDs\n\nWhen manipulating data maintained in JSON, or other external format, each object will often require an ID in order to manipulate the information effectively. Introduce an ID for every playlist, and every song.\n\n## Exercise 4: New Fields\n\nExtend the playlist to have new entry called `duration`. Also, extend each song to also have a `duration` field + a `genre` field.\n\nModify the dashboard view to display these new fields.\n\n## Solutions\n\nThese are solutions to all three exercises:\n\nFirst the extended model:\n\n## models/playlist-store.json\n\n~~~js\n{\n  \"playlistCollection\": [\n    {\n      \"id\" : \"01\",\n      \"title\": \"Beethoven Sonatas\",\n      \"duration\": 35,\n      \"songs\": [\n        {\n          \"id\" : \"04\",\n          \"title\": \"Piano Sonata No. 3\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 5\n        },\n        {\n          \"id\" : \"05\",\n          \"title\": \"Piano Sonata No. 7\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 6\n        },\n        {\n          \"id\" : \"06\",\n          \"title\": \"Piano Sonata No. 10\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 4\n        }\n      ]\n    },\n    {\n      \"id\" : \"02\",\n      \"title\": \"Beethoven Concertos\",\n      \"duration\": 23,\n      \"songs\": [\n        {\n          \"id\" : \"07\",\n          \"title\": \"Piano Concerto No. 0\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 8\n        },\n        {\n          \"id\" : \"08\",\n          \"title\": \"Piano Concerto No. 4\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 3\n        },\n        {\n          \"id\" : \"09\",\n          \"title\": \"Piano Concerto No. 6\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 4\n        }\n      ]\n    },\n    {\n      \"id\" : \"03\",\n      \"title\": \"Beethoven Variations\",\n      \"duration\": 67,\n      \"songs\": [\n        {\n          \"id\" : \"10\",\n          \"title\": \"Opus 34: Six variations on a theme in F major\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 11\n        },\n        {\n          \"id\" : \"11\",\n          \"title\": \"Opus 120: Thirty-three variations on a waltz by Diabelli in C majo\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 45\n        }\n      ]\n    }\n  ]\n}\n~~~\n\nNow we can revise the dashboard to show additional fields:\n\n## views/dashboard.hbs\n\n~~~html\n{{> menu id=\"dashboard\"}}\n\n{{#each playlists}}\n  <section class=\"ui segment\">\n    <h2 class=\"ui header\">\n      {{title}}\n    </h2>\n    <p> Total Duration: {{duration}} </p>\n    <table class=\"ui table\">\n      <thead>\n        <tr>\n          <th>Song</th>\n          <th>Artist</th>\n          <th>Genre</th>\n          <th>Duration</th>\n        </tr>\n      </thead>\n      <tbody>\n        {{#each songs}}\n          <tr>\n            <td>\n              {{title}}\n            </td>\n            <td>\n              {{artist}}\n            </td>\n            <td>\n              {{genre}}\n            </td>\n            <td>\n              {{duration}}\n            </td>\n          </tr>\n        {{/each}}\n      </tbody>\n    </table>\n  </section>\n{{/each}}\n~~~\n\nThe dashboard should look like this now:\n\n![](img/06.png)\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/Exercise Solutions"
                },
                {
                  "title": "# Playlist Summaries",
                  "shortTitle": "01",
                  "contentMd": "# Playlist Summaries\n\nWe would like to change the app to just display a list of playlists on the dashboard, not the complete contents of each playlist. Replace the current dashboard with the following:\n\n## views/dashboard.hbs\n\n~~~html\n{{> menu id=\"dashboard\"}}\n\n{{#each playlists}}\n  <section class=\"ui segment\">\n    <h2 class=\"ui header\">\n      {{title}}\n    </h2>\n    <p> Total Duration: {{duration}} </p>\n    <a href=\"#\"> View </a>\n  </section>\n{{/each}}\n~~~\n\nThis will render like this:\n\n![](img/01.png)\n\nThe `view` links are currently inert, but we would like them to cause a new view to be rendered, containing the playlist concerned.\n\nAs each playlist now has an ID, this can make this convenient to implement. Here is a new version of the `view` link:\n\n~~~html\n    <a href=\"/playlist/{{id}}\"> View </a>\n~~~\n\nWith this change in place, try hovering over each view link (without pressing it). In Chrome, keep an eye on the stats bar which should show a the link including the id:\n\n![](img/02.png)\n\nHover over each link and note how the ID changes. Clicking on any link causes the following error:\n\n~~~\nCannot GET /playlist/02\n~~~\n\nWe need a new controller to display a new view containing the playlist details. We will do this in the next step.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/01"
                },
                {
                  "title": "# Router + Controller",
                  "shortTitle": "02",
                  "contentMd": "# Router + Controller\n\nThe starting point for any new link in our app is to first define a `route` to support this link. All supported routes are defined in `routes.js`\n\nThis is the current version:\n\n## routes.js\n\n~~~js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\n\nconst dashboard = require('./controllers/dashboard.js');\nconst about = require('./controllers/about.js');\n\nrouter.get('/', dashboard.index);\nrouter.get('/dashboard', dashboard.index);\nrouter.get('/about', about.index);\n\nmodule.exports = router;\n~~~\n\nIn particular, these are the three routes currently supported:\n\n~~~js\nrouter.get('/', dashboard.index);\nrouter.get('/dashboard', dashboard.index);\nrouter.get('/about', about.index);\n~~~\n\nThese are the three patterns our app responds to: `/`, `/dashboard` and `/about`. Any other pattern will generate a not found error from our app.\n\nWe now have a new pattern `/playlist/id`, which we would like to route to a controller that would render a new view detailing the playlist contents. Also note that each of these statements matches a route pattern with a function inside a controller. \n\nSo, for instance, this import + route:\n\n~~~js\nconst about = require('./controllers/about.js');\n...\nrouter.get('/about', about.index);\n~~~\n\n... ensures that this function would be called if the route was triggered:\n\n~~~js\nconst about = {\n  index(request, response) {\n    const viewData = {\n      title: 'About Playlist Maker',\n    };\n    response.render('about', viewData);\n  },\n};\n~~~\n\nMake sure you understand this connection before proceeding. Try changing the spelling of the index method for instance - and see what happens (make sure to change it back!).\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/02"
                },
                {
                  "title": "# Controller/View/Route",
                  "shortTitle": "03",
                  "contentMd": "# Controller/View/Route\n\nBringing in a new controller usually requires three things:\n\n- a controller\n- a view\n- a route\n\nHere is is the new controller:\n\n## controllers/playlist.js\n\n~~~js\n'use strict';\n\nconst logger = require('../utils/logger');\nconst playlistCollection = require('../models/playlist-store.js');\n\nconst playlist = {\n  index(request, response) {\n    const viewData = {\n      title: 'Playlist',\n    };\n    response.render('playlist', viewData);\n  },\n};\n\nmodule.exports = playlist;\n~~~\n\nCreate this in glitch by pressing the `New File` button:\n\n![](img/07.png)\n\nMake sure to enter the folder + file name as shown above.\n\nThis new controller will render a view called `playlist`. Create this view in glitch now:\n\n## views/playlist.hbs\n\n~~~html\n{{> menu}}\n\n<section class=\"ui center aligned middle aligned segment\">\n  <h2 class=\"ui header\">\n    Playlist Details...\n  </h2>\n</section>\n~~~\n\nFinally, the route. This will require the controller to be imported at the top of the module:\n\n## routes.js\n\n~~~js\n...\nconst playlist = require('./controllers/playlist.js');\n...\n~~~\n\n... and then we can add the new route:\n\n~~~js\nrouter.get('/playlist/:id', playlist.index);\n~~~\n\nNotice that the route includes this segment: `/:id`. This means it matches any route that includes an extra wildcard segment at the end.\n\nImplement all of the above now and verify that the view is rendered as expected. \n\nIt does not display the playlist yet - just a placeholder for the moment:\n\n![](img/09.png)\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/03"
                },
                {
                  "title": "# Playlists",
                  "shortTitle": "04",
                  "contentMd": "# Playlists\n\nIn order to display the correct playlist, we need to extract the id from the url. Modify the playlist controller index method as follows:\n\n~~~js\n  index(request, response) {\n    const playlistId = request.params.id;\n    logger.info('Playlist id = ' + playlistId);\n    const viewData = {\n      title: 'Playlist',\n    };\n    response.render('playlist', viewData);\n  },\n~~~\n\n(be careful - it is just the index method we are replacing - not the entire module)\n\nWe are extracting and logging the id here:\n\n~~~\n    const playlistId = request.params.id;\n    logger.info('Playlist id = ' + playlistId);\n~~~\n\nRun the app and select each of the playlist links in turn. The logs will display each of the Ids as you do this:\n\n![](img/10.png)\n\nWe need to find a way of locating the playlist with the id, and then pass this specific playlist to the view to be rendered. This requires a rethink of the model, in particular the `playlist-store.js` module.\n\nThis currently looks like this:\n\n## models/playlist-sto\n~~~\n\"use strict\";\n\nconst playlistCollection = require(\"./playlist-store.json\").playlistCollection;\n\nmodule.exports = playlistCollection;\n~~~\n\nAll it is doing is locating the playListCollection array in the playlist-store.json file and exporting it to whomsoever requires it.\n\nHere is a new version of this module:\n\n## models/playlist-store.js\n\n~~~js\n'use strict';\n\nconst playlistStore = {\n\n  playlistCollection: require('./playlist-store.json').playlistCollection,\n\n  getAllPlaylists() {\n    return this.playlistCollection;\n  },\n\n  getPlaylist(id) {\n    let foundPlaylist = null;\n    for (let playlist of this.playlistCollection) {\n      if (id == playlist.id) {\n        foundPlaylist = playlist;\n      }\n    }\n\n    return foundPlaylist;\n  },\n};\n\nmodule.exports = playlistStore;\n~~~\n\nIn this version, we have an object `playlsitStore` one attribute:\n\n- `playListCollection`: this is the array of playlists loaded from the json file.\n\nand two functions:\n\n- `getAllPlaylists()` : return all playlists\n- `getlPlaylist(id)`: locate and return a specific playlist.\n\nThe Dashboard controller will have to be refactored to use this object:\n\n## controllers/dashboard.js\n\n~~~js\n\"use strict\";\n\nconst logger = require(\"../utils/logger\");\nconst playlistStore = require('../models/playlist-store');\n\nconst dashboard = {\n  index(request, response) {\n    logger.info('dashboard rendering');\n    const viewData = {\n      title: 'Playlist Dashboard',\n      playlists: playlistStore.getAllPlaylists(),\n    };\n    logger.info('about to render', playlistStore.getAllPlaylists());\n    response.render('dashboard', viewData);\n  },\n};\n\nmodule.exports = dashboard;\n~~~\n\nIn the above we are importing the playListStore object. Then, when we are creating the viewData object, we are calling `playlistStore.getAllPlaylists()`. This will place all playlists into the viewData object.\n\nFinally, the playlists controller + view can be implemented:\n\n## controllers/playlist.js\n\n~~~js\n'use strict';\n\nconst logger = require('../utils/logger');\nconst playlistStore = require('../models/playlist-store');\n\nconst playlist = {\n  index(request, response) {\n    const playlistId = request.params.id;\n    logger.debug('Playlist id = ', playlistId);\n    const viewData = {\n      title: 'Playlist',\n      playlist: playlistStore.getPlaylist(playlistId),\n    };\n    response.render('playlist', viewData);\n  },\n};\n\nmodule.exports = playlist;\n~~~\n\nNotice the way in which we are creating the viewData object this time:\n\n~~~\n    const viewData = {\n      title: 'Playlist',\n      playlist: playlistStore.getPlaylist(playlistId),\n    };\n~~~\n\nWe are getting as specific playlist - with the id playlistId - and placing it in the viewData object.\n\nNow we can now rework playlist.hbs to display the playlist title + trigger listsongs.hbs:\n\n## views/playlist.hbs\n\n~~~html\n{{> menu}}\n\n<section class=\"ui center aligned middle aligned segment\">\n  <h2 class=\"ui header\">\n    {{playlist.title}}\n  </h2>\n  {{> listsongs}}\n</section>\n~~~\n\nListsongs will pick up the playlist and display each song (look at the listsongs.hbs again)\n\nThe app should now run as expected, with playlist summaries on the dashboard, and a view link rendering the playlists details:\n\n![](img/11.png)\n![](img/12.png)\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/04"
                },
                {
                  "title": "# Deleting Songs : Part 1",
                  "shortTitle": "05",
                  "contentMd": "# Deleting Songs : Part 1\n\nHaving a playlist app, without the ability to create/delete songs or playlists is clearly very limited. We have, essentially, an app that allows us to `Read` our models, but not `Create`, `Update` or `Delete` elements of the model.\n\nWe can start with providing a facility to delete songs from individual playlists. At the end of this step our view will look like this:\n\n![](img/03.png)\n\nPressing the delete button should remove the corresponding song.\n\nAny new button/link/action on our page requires:\n\n- an element in a view\n- a route matching the view element\n- a matching controller function\n\n.. and it may also involve some interaction with the model.\n\n# View\n\nThe new button must appear in each song row:\n\n## views/partials/listsongs.hbs\n\n~~~html\n    ...\n        <td>\n          <a href=\"/playlist/{{../playlist.id}}/deletesong/{{id}}\" class=\"ui tiny red button\">Delete Song</a>\n        </td>\n    ...\n~~~\n\n\n# Route\n\nA new route - containing both the playlist and song id - and linking to a new function in the playlist controller:\n\n## routes.js\n\n~~~js\nrouter.get('/playlist/:id/deletesong/:songid', playlist.deleteSong);\n~~~\n\n# Controller\n\nThis is a new method to handle this route in the playlist controller:\n\n## controllers/playlist.js\n\n~~~js\n  deleteSong(request, response) {\n    const playlistId = request.params.id;\n    const songId = request.params.songid;\n    logger.debug(`Deleting Song ${songId} from Playlist ${playlistId}`);\n    playlistStore.removeSong(playlistId, songId);\n    response.redirect('/playlist/' + playlistId);\n  },\n~~~\n\n# Model\n\nThe model now needs a new method to delete a song, given the id of the playlist and the song:\n\n## models/playlist-store.js\n\n~~~js\n  removeSong(id, songId) {\n    const playlist = this.getPlaylist(id);\n\n    // TODO : remove the song with id songId from the playlist\n  },\n~~~\n\nTry all of this now - and verify that the logs shows the attempt to delete the song when the button is pressed.\n\nWe havent actually deleted the song - we will leave that to the next step.\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/05"
                },
                {
                  "title": "# Deleting Songs : Part 2",
                  "shortTitle": "06",
                  "contentMd": "# Deleting Songs : Part 2\n\nThere are many techniques for deleting an element from an array, which require more in depth Javascript knowledge. However, we have a simpler solution for the moment via the `lodash` library.\n\nAt the top of our `playlist-store.js` module, import this library:\n\n## models/playlist-store.js\n\n~~~js\nconst _ = require('lodash');\n~~~\n\nHere is the complete `removeSong` function:\n\n~~~js\n  removeSong(id, songId) {\n    const playlist = this.getPlaylist(id);\n    _.remove(playlist.songs, { id: songId });\n  },\n~~~\n\nThis library is already installed in our project template - and you can read about how it works and what is does:\n\n- <https://lodash.com/>\n\nThis is a modern, comprehensive library for managing data structures in Javascript. This video is the introduction to a series on lodash:\n\n- <https://youtu.be/GUGuXsEYtLc?list=PLTgRMOcmRb3OL-PKT5FvIBdXVazTNTl-_>\n\nWhich will give you a very brief idea of some of the features of this library. This library has many features and capabilities and we will explore some of them in subsequent labs.\n\nAs a start - we can simplify the `getPlaylist` function:\n\n~~~js\n  getPlaylist(id) {\n    let foundPlaylist = null;\n    for (let playlist of this.playlistCollection) {\n      if (id == playlist.id) {\n        foundPlaylist = playlist;\n      }\n    }\n\n    return foundPlaylist;\n  },\n~~~\n\nThis performs a linear search to locate and return a playlist with a matching id. This can be simplified using lodash:\n\n~~~js\n  getPlaylist(id) {\n    return _.find(this.playlistCollection, { id: id });\n  },\n~~~\n\nIn future, when we are working with our playlists, we will usually check with lodash when we need to do anything, to see if it has a shorter/easier technique than writing our own algorithms.\n\nFor some more advanced uses, skim read this:\n\n- <http://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting>\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/06"
                },
                {
                  "title": "# Exercises",
                  "shortTitle": "Exercises",
                  "contentMd": "# Exercises\n\nIf you want to download a complete version of the app as it should be at the end of this lab, then create a new Glitch project, and clone this repo:\n\n- <https://github.com/wit-hdip-comp-sci-2019/playlist-2>\n\n## Exercise 1: UX Enhancements\n\nIntroduce a 'Delete Playlist' button for each playlist, represented by a `trash` icon. E.g:\n\n![](img/04.png)\n\nIn addition, the `view` link is replace by a `folder open` icon.\n\nBind the `delete playlist` button to a new function to be implemented in the Dashboard controller, which should log the id of the playlist to be deleted.\n\n## Exercise 2: Delete Playlist Functionality\n\nMake the button actually delete the denoted playlist.\n\nHINT: This is a new function in the `playlist-store` module to delete a playlist, given an ID:\n\n~~~js\nremovePlaylist(id) {\n  _.remove(this.playlistCollection, { id: id });\n},\n~~~\n\nTry to implement the rest of the feature, using the song delete feature as a guide.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/unit-1/book-a-playlist-2/Exercises"
                }
              ]
            }
          ]
        },
        {
          "title": "04: Templates & Views ",
          "type": "panelvideo",
          "summary": "04: Templates & Views",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/panelvideo/",
          "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/panelvideo/Iz3oj7hVgUw",
          "id": "panelvideo",
          "route": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-04-app-templates+views/panelvideo/Iz3oj7hVgUw",
          "hide": false
        }
      ]
    },
    {
      "title": "5: Model View Controller ",
      "type": "topic",
      "summary": "Explore MVC as implemented in Playlist",
      "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/topic.jpg",
      "id": "topic-05-app-models",
      "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models",
      "hide": false,
      "los": [
        {
          "title": "Forms ",
          "type": "unit",
          "summary": "Forms",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-1-delete-button/delete-button.png",
          "id": "unit",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/",
          "hide": false,
          "los": [
            {
              "title": "Delete Song ",
              "type": "talk",
              "summary": "How to remove a song from the playlist",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-1-delete-button/delete-button.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-1-delete-button/PeJ75OROwEo",
              "id": "talk-1-delete-button",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-1-delete-button/delete-button.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-1-delete-button/delete-button.pdf"
            },
            {
              "title": "Forms Design ",
              "type": "talk",
              "summary": "How a form UI is laid out in HTML using Semntic UI",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-2-form-design/forms-design.jpg",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-2-form-design/xR1EeVX2WJE",
              "id": "talk-2-form-design",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-2-form-design/forms-design.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-2-form-design/forms-design.pdf"
            },
            {
              "title": "Form Programming ",
              "type": "talk",
              "summary": "How to accept user input from a form and process it in a controller",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-3-form-programming/form-prog.jpg",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-3-form-programming/bKjNqvTVdVU",
              "id": "talk-3-form-programming",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-3-form-programming/form-prog.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/talk-3-form-programming/form-prog.pdf"
            },
            {
              "title": "Lab-6 Playlist 3",
              "type": "lab",
              "summary": "Enable Songs and Playlists to be added via simple forms.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/book-a-gomix-playlist-3/img/main.jpg",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/book-a-gomix-playlist-3/UaTppJ3hp-Y",
              "id": "book-a-gomix-playlist-3",
              "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/book-a-gomix-playlist-3",
              "hide": false,
              "los": [
                {
                  "title": "#Objectives",
                  "shortTitle": "Lab-6 Playlist 3",
                  "contentMd": "#Objectives\n\nEnable Songs and Playlists to be added via simple forms.\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/book-a-gomix-playlist-3/Lab-6 Playlist 3"
                },
                {
                  "title": "# Exercise Solutions",
                  "shortTitle": "Exercise Solutions",
                  "contentMd": "# Exercise Solutions\n\nThis lab requires that the `playlist-2` lab be completed. If you have lost your solution, create a new project in Glitch by cloning this repo:\n\n- <https://github.com/wit-hdip-comp-sci-2019/playlist-2>\n\nInstructions on how to do this are [here](https://tutors.design/lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com/topic-03-web-apps/unit-2/book-a-glitch-playlist-1/01). Remember to use the url above.\n\nThese are the exercises from the last lab:\n\n## Exercise 1: UX Enhancements & Exercise 3: listplaylists partial\n\nIntroduce a 'Delete Playlist' button for each playlist, represented by a `trash` icon.\n\nFirst, create a new partial:\n\n## views/partials/listplaylists.hbs\n\n~~~html\n{{#each playlists}}\n  <section class=\"ui stacked segment\">\n    <h2 class=\"ui header\">\n      {{title}}\n    </h2>\n    <p> Total Duration: {{duration}} </p>\n    <a href=\"/playlist/{{id}}\" class=\"ui icon button\">\n      <i class=\"icon folder open\"></i>\n    </a>\n    <a href=\"/dashboard/deleteplaylist/{{id}}\" class=\"ui icon button\">\n      <i class=\"icon trash\"></i>\n    </a>\n  </section>\n{{/each}}\n~~~\n\nNow we can refactor the dashboard partial to use this:\n\n## views/dashboard.hbs\n\n~~~html\n{{> menu id=\"dashboard\"}}\n\n<section class=\"ui segment\">\n  {{> listplaylists}}\n</section>\n~~~\n\nThe UI should look like this:\n\n![](img/07.png)\n\nHowever, the delete (trash) button doesn't work yet (try it).\n\n## Exercise 2: Delete Playlist Functionality\n\nMake the button actually delete the denoted playlist.\n\nFirst, a route to delete the playlist:\n\n## routes.js\n\n~~~js\n...\nrouter.get('/dashboard/deleteplaylist/:id', dashboard.deletePlaylist);\n...\n~~~\n\nThen the method to implement this route:\n\n## controllers/dashboard.js\n\n~~~js\n...\n  deletePlaylist(request, response) {\n    const playlistId = request.params.id;\n    logger.debug(`Deleting Playlist ${playlistId}`);\n    playlistStore.removePlaylist(playlistId);\n    response.redirect('/dashboard');\n  },\n...\n~~~\n\nWhen introducing the new method above, you will need to separate the method from the existing index method with a comma - an syntax error will appear of you forget this. Here is the complete dashboard.js for reference:\n\n~~~\n\"use strict\";\n\nconst logger = require(\"../utils/logger\");\nconst playlistStore = require(\"../models/playlist-store\");\n\nconst playlist = {\n  index(request, response) {\n    const playlistId = request.params.id;\n    logger.debug(\"Playlist id = \", playlistId);\n    const viewData = {\n      title: \"Playlist\",\n      playlist: playlistStore.getPlaylist(playlistId)\n    };\n    response.render(\"playlist\", viewData);\n  },\n\n  deleteSong(request, response) {\n    const playlistId = request.params.id;\n    const songId = request.params.songid;\n    logger.debug(`Deleting Song ${songId} from Playlist ${playlistId}`);\n    playlistStore.removeSong(playlistId, songId);\n    response.redirect(\"/playlist/\" + playlistId);\n  }\n};\n\nmodule.exports = playlist;\n~~~\n\n\n\nFinally, we need a new method on playlist-store to delete the playlist form the model:\n\n## models/playlist-store.js\n\n~~~js\n  removePlaylist(id) {\n    _.remove(this.playlistCollection, { id: id });\n  },\n~~~\n\nAgain, a comma may be needed. This is the complete playlist-store at this stage:\n\n~~~\n\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst playlistStore = {\n  playlistCollection: require(\"./playlist-store.json\").playlistCollection,\n\n  getAllPlaylists() {\n    return this.playlistCollection;\n  },\n\n  getPlaylist(id) {\n    return _.find(this.playlistCollection, { id: id });\n  },\n\n  removeSong(id, songId) {\n    const playlist = this.getPlaylist(id);\n    _.remove(playlist.songs, { id: songId });\n  },\n  \n  removePlaylist(id) {\n    _.remove(this.playlistCollection, { id: id });\n  },\n};\n\nmodule.exports = playlistStore;\n~~~\n\nVerify now that you can delete playlists.\n\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/book-a-gomix-playlist-3/Exercise Solutions"
                },
                {
                  "title": "# Adding a Song",
                  "shortTitle": "01",
                  "contentMd": "# Adding a Song\n\nBefore adding a song, lets align the delete button appearance with the delete playlist. Use this icon button instead of the existing one:\n\n## views/partials/listsongs.hbs\n\n~~~html\n          <a href=\"/playlist/{{../playlist.id}}/deletesong/{{id}}\" class=\"ui icon button\">\n            <i class=\"icon trash\"></i>\n          </a>\n~~~\n\nThis is the complete listsongs partial now:\n\n~~~\n<table class=\"ui table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#each playlist.songs}}\n      <tr>\n        <td>\n          {{title}}\n        </td>\n        <td>\n          {{artist}}\n        </td>\n        <td>\n          <a href=\"/playlist/{{../playlist.id}}/deletesong/{{id}}\" class=\"ui icon button\">\n            <i class=\"icon trash\"></i>\n          </a>\n        </td>\n      </tr>\n    {{/each}}\n  </tbody>\n</table>\n~~~\n\nIn order to add songs, we need this new partial which provides a simple add song form. Introduce this new partial now:\n\n## views/partials/addsong.hbs\n\n~~~html\n<form class=\"ui stacked segment form\" action=\"/playlist/{{playlist.id}}/addsong\" method=\"POST\">\n  <div class=\"two fields\">\n    <div class=\"field\">\n      <label>Title</label>\n      <input placeholder=\"Title\" type=\"text\" name=\"title\">\n    </div>\n    <div class=\"field\">\n      <label>Artist</label>\n      <input placeholder=\"Artist\" type=\"text\" name=\"artist\">\n    </div>\n  </div>\n  <button class=\"ui blue submit button\">Add Song</button>\n</form>\n~~~\n\nWe need to incorporate this in the playlist view:\n\n## views/playlist.hbs\n\n~~~\n{{> menu}}\n\n<section class=\"ui center aligned middle aligned segment\">\n  <h2 class=\"ui header\">\n    {{playlist.title}}\n  </h2>\n  {{> listsongs}}\n  {{> addsong}}\n</section>\n~~~\n\nThis should now appear at then end of each playlist:\n\n![](img/01.png)\n\nNow we meed a new route to support the form we have just added:\n\n## routes.js\n\n~~~js\n...\nrouter.post('/playlist/:id/addsong', playlist.addSong);\n...\n~~~\n\n... and this new function in the `playlist` controller:\n\n## controllers/playlist.js\n\n~~~js\n...\n  addSong(request, response) {\n    const playlistId = request.params.id;\n    const playlist = playlistStore.getPlaylist(playlistId);\n    const newSong = {\n      title: request.body.title,\n      artist: request.body.artist,\n    };\n    playlistStore.addSong(playlistId, newSong);\n    response.redirect('/playlist/' + playlistId);\n  },\n...\n~~~\n\nThis is the complete playlist controller now:\n\n~~~\n\"use strict\";\n\nconst logger = require(\"../utils/logger\");\nconst playlistStore = require(\"../models/playlist-store\");\n\nconst playlist = {\n  index(request, response) {\n    const playlistId = request.params.id;\n    logger.debug(\"Playlist id = \", playlistId);\n    const viewData = {\n      title: \"Playlist\",\n      playlist: playlistStore.getPlaylist(playlistId)\n    };\n    response.render(\"playlist\", viewData);\n  },\n\n  deleteSong(request, response) {\n    const playlistId = request.params.id;\n    const songId = request.params.songid;\n    logger.debug(`Deleting Song ${songId} from Playlist ${playlistId}`);\n    playlistStore.removeSong(playlistId, songId);\n    response.redirect(\"/playlist/\" + playlistId);\n  },\n  \n  addSong(request, response) {\n    const playlistId = request.params.id;\n    const playlist = playlistStore.getPlaylist(playlistId);\n    const newSong = {\n      title: request.body.title,\n      artist: request.body.artist,\n    };\n    playlistStore.addSong(playlistId, newSong);\n    response.redirect('/playlist/' + playlistId);\n  },\n};\n\nmodule.exports = playlist;\n\n~~~\n\nFinally, we need to implement a new  `addSong` method in the playlist-store:\n\n## modiels/playlist-store.js\n\n~~~js\n  addSong(id, song) {\n    const playlist = this.getPlaylist(id);\n    playlist.songs.push(song);\n  },\n~~~\n\nThis is the complete playlist-store:\n\n~~~\n\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst playlistStore = {\n  playlistCollection: require(\"./playlist-store.json\").playlistCollection,\n\n  getAllPlaylists() {\n    return this.playlistCollection;\n  },\n\n  getPlaylist(id) {\n    return _.find(this.playlistCollection, { id: id });\n  },\n\n  removeSong(id, songId) {\n    const playlist = this.getPlaylist(id);\n    _.remove(playlist.songs, { id: songId });\n  },\n  \n  removePlaylist(id) {\n    _.remove(this.playlistCollection, { id: id });\n  },\n  \n  addSong(id, song) {\n    const playlist = this.getPlaylist(id);\n    playlist.songs.push(song);\n  },\n};\n\nmodule.exports = playlistStore;\n~~~\n\nTry the app  now and verify that you can add songs.\n\nThink about the following at this stage:\n\n- Can you delete one of the songs you have just added? \n- Can you delete one of the songs that have been in there already? \n\nWhat might be happening in the above? (see next step to explore further).\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/book-a-gomix-playlist-3/01"
                },
                {
                  "title": "# ID Management",
                  "shortTitle": "02",
                  "contentMd": "# ID Management\n\nDeleting a song you have manually added using the form generates the following:\n\n~~~\nCannot GET /playlist/02/deletesong/\n~~~\n\nHowever, pre-populated songs can still be deleted. What is going on here?\n\nThe issue is that the new songs we have added do not appear to have IDs. Looking at this list for instance:\n\n![](img/02.png)\n\nIn the browser, right-click and select 'view source' and you should see something like this:\n\n![](img/03.png)\n\nLook at the last entry - there is no ID for the new song we added.\n\nHere is our `addsong` function again:\n\n## controlers/playlist.js\n\n~~~js\n  addSong(request, response) {\n    const playlistId = request.params.id;\n    const playlist = playlistStore.getPlaylist(playlistId);\n    const newSong = {\n      title: request.body.title,\n      artist: request.body.artist,\n    };\n    playlistStore.addSong(playlistId, newSong);\n    response.redirect('/playlist/' + playlistId);\n  },\n~~~\n\nThe object we are inserting has only two fields:\n\n~~~js\n    const newSong = {\n      title: request.body.title,\n      artist: request.body.artist,\n    };\n~~~\n\nWe need to also insert a new, unique, ID for each object we create.\n\nHow do we create a new ID? This can be challenged in implement manually. However, one solution is to use Universally Unique Identifiers:\n\n- <https://en.wikipedia.org/wiki/Universally_unique_identifier>\n\nA library to generate a uuid is already in our app, we just need to import and use it\n\nAt the top of the `playlist` controller, we require the library. Insert this at the top of the modile:\n\n## controllers/playlists.js\n~~~\nconst uuid = require('uuid');\n~~~\n\nNow, when we are creating a playlist, we can use the library to generate a unique id for us:\n\n~~~js\n  const newSong = {\n    id: uuid(),\n    title: request.body.title,\n    artist: request.body.artist,\n  };\n~~~\n\nThis is the complete playlist module at this stage:\n\n~~~\n\"use strict\";\n\nconst logger = require(\"../utils/logger\");\nconst playlistStore = require(\"../models/playlist-store\");\nconst uuid = require('uuid');\n\nconst playlist = {\n  index(request, response) {\n    const playlistId = request.params.id;\n    logger.debug(\"Playlist id = \", playlistId);\n    const viewData = {\n      title: \"Playlist\",\n      playlist: playlistStore.getPlaylist(playlistId)\n    };\n    response.render(\"playlist\", viewData);\n  },\n\n  deleteSong(request, response) {\n    const playlistId = request.params.id;\n    const songId = request.params.songid;\n    logger.debug(`Deleting Song ${songId} from Playlist ${playlistId}`);\n    playlistStore.removeSong(playlistId, songId);\n    response.redirect(\"/playlist/\" + playlistId);\n  },\n  \n  addSong(request, response) {\n    const playlistId = request.params.id;\n    const playlist = playlistStore.getPlaylist(playlistId);\n    const newSong = {\n      id: uuid(),\n      title: request.body.title,\n      artist: request.body.artist,\n    };\n    playlistStore.addSong(playlistId, newSong);\n    response.redirect('/playlist/' + playlistId);\n  },\n};\n\nmodule.exports = playlist;\n~~~\n\nTry this now and make sure the new songs can be deleted. View the source to reveal the uuid-style ids in the new songs:\n\n![](img/08.png)\n\nIn addition, we can add a log statement so that we can see the songs as they are added:\n\n~~~\n...\n    logger.debug('New Song = ', newSong);\n...\n~~~\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/book-a-gomix-playlist-3/02"
                },
                {
                  "title": "# Adding playlists",
                  "shortTitle": "03",
                  "contentMd": "# Adding playlists\n\nTaking the last step as an example, we can quickly implement the necessary form, route, controller function and model update to support adding a new playlist (as opposed to a song).\n\nThis is a new addplaylist partial:\n\n## views/partials/addplaylist.hbs\n\n~~~html\n<form class=\"ui stacked segment form\" action=\"/dashboard/addplaylist\" method=\"POST\">\n  <div class=\"field\">\n    <label>Title</label>\n    <input placeholder=\"Title\" type=\"text\" name=\"title\">\n  </div>\n  <button class=\"ui blue submit button\">Add Playlist</button>\n</form>\n~~~\n\nModify dashboard to append this partial:\n\n## views/dashboard.hbs\n\n~~~html\n{{> menu id=\"dashboard\"}}\n\n<section class=\"ui segment\">\n  {{> listplaylists}}\n  {{> addplaylist}}\n</section>\n~~~\n\nThis now requires a new route:\n\n## routes.js\n\n~~~js\nrouter.post('/dashboard/addplaylist', dashboard.addPlaylist);\n~~~\n\n.. and this is the new method on the dashboard controller:\n\n## controllers/dashboard.js\n\nImport the uuid library at the top:\n\n~~~js\nconst uuid = require('uuid');\n~~~\n\n... and then this new method\"\n\n~~~\n...\n  addPlaylist(request, response) {\n    const newPlayList = {\n      id: uuid(),\n      title: request.body.title,\n      songs: [],\n    };\n    playlistStore.addPlaylist(newPlayList);\n    response.redirect('/dashboard');\n  },\n~~~\n\nNotice we are again using the uuid library here to generate and ID for the new playlist.\n\nFinally, a new method in the playlist-store to add a playlist:\n\n## modes/playlist-store.js\n\n~~~js\naddPlaylist(playlist) {\n  this.playlistCollection.push(playlist);\n},\n~~~\n\nWe should now be able to add new playlists.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/book-a-gomix-playlist-3/03"
                },
                {
                  "title": "# Persistence",
                  "shortTitle": "04",
                  "contentMd": "# Persistence\n\nYou will note that, even though we are able to add/delete playlists/songs, every time the app restarts then we are left with the same initial playlist. i.e. none of the changes we make are `persisted` beyond the life of the program execution.\n\nThis is the field of databases - and beyond the scope of this course for the moment. However, we can implement something like a database, but simpler, which can serve our needs. Introduce this new class into the project:\n\n## models/json-store.js\n\n~~~js\n'use strict';\n\nconst low = require('lowdb');\nconst FileSync = require('lowdb/adapters/FileSync')\n\nclass JsonStore {\n  constructor(file, defaults) {\n    const adapter = new FileSync(file)\n    this.db = low(adapter)\n    this.db.defaults(defaults).value();\n  }\n\n  save() {\n    this.db.write();\n  }\n\n  add(collection, obj) {\n    this.db.get(collection).push(obj).last().value();\n  }\n\n  remove(collection, obj) {\n    this.db.get(collection).remove(obj).value();\n  }\n\n  removeAll(collection) {\n    this.db.get(collection).remove().value();\n  }\n\n  findAll(collection) {\n    return this.db.get(collection).value();\n  }\n\n  findOneBy(collection, filter) {\n    const results = this.db.get(collection).filter(filter).value();\n    return results[0];\n  }\n\n  findByIds(collection, ids) {\n    return this.db.get(collection).keyBy('id').at(ids).value();\n  }\n\n  findBy(collection, filter) {\n    return this.db.get(collection).filter(filter).value();\n  }\n}\n\nmodule.exports = JsonStore;\n~~~\n\nThis is a wrapper around this module:\n\n- <https://github.com/typicode/lowdb>\n\nIt will manage the json file we have been using, enabling updates in a convenient manner. You do not need to understand this module in depth for the moment, we will use another wrapper module to interact with it.\n\nHere is the wraper, which is a new version of our playlist store module:\n\n## models/playlist-store.js\n\n~~~js\n'use strict';\n\nconst _ = require('lodash');\nconst JsonStore = require('./json-store');\n\nconst playlistStore = {\n\n  store: new JsonStore('./models/playlist-store.json', { playlistCollection: [] }),\n  collection: 'playlistCollection',\n\n  getAllPlaylists() {\n    return this.store.findAll(this.collection);\n  },\n\n  getPlaylist(id) {\n    return this.store.findOneBy(this.collection, { id: id });\n  },\n\n  addPlaylist(playlist) {\n    this.store.add(this.collection, playlist);\n    this.store.save();\n  },\n\n  removePlaylist(id) {\n    const playlist = this.getPlaylist(id);\n    this.store.remove(this.collection, playlist);\n    this.store.save();\n  },\n\n  removeAllPlaylists() {\n    this.store.removeAll(this.collection);\n    this.store.save();\n  },\n\n  addSong(id, song) {\n    const playlist = this.getPlaylist(id);\n    playlist.songs.push(song);\n    this.store.save();\n  },\n\n  removeSong(id, songId) {\n    const playlist = this.getPlaylist(id);\n    const songs = playlist.songs;\n    _.remove(songs, { id: songId});\n    this.store.save();\n  },\n};\n\nmodule.exports = playlistStore;\n~~~\n\nNo other changes are necessary - as all access to the playlist is via the above module.\n\nThe app should work now as before, except this time changes to the playlists will be `persisted` to the json file. This means that if the app has to be restarted, it will have preserved any changes to the playlist in the JSON file, which will be reloaded when the app restarts.\n\nYou can force a reload by deliberately introducing a syntax error - and then correcting it.\n\nHowever, because of limitations in the way glitch is currently configured the playlist-store.json file will often not be in sync and not be updated at all. If you download and run the application locally (in webstorm), the json file will be updated accurately.\n\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/book-a-gomix-playlist-3/04"
                },
                {
                  "title": "# Exercises",
                  "shortTitle": "Exercises",
                  "contentMd": "# Exercises\n\nIf you want to download a complete version of the app as it should be at the end of this lab, then create a new Glitch project, and clone this repo:\n\n- <https://github.com/wit-hdip-comp-sci-2019/playlist-3>\n\nYou can also clone this repo directly, run 'npm install' from inside the folder and then run from within Webstorm.\n\n## Exercise 1: Display Durations\n\nMake sure the duration of each song and playlist is visible on the UX\n\n![](img/04.png)\n![](img/05.png)\n\n## Exercise 2: Add Song Duration\n\nModify the add song form to accept a song duration as well as title and artist:\n\n![](img/06.png)\n\nMake sure the duration is stored in the data store, and is displayed on the playlist view.\n\nHINT: When reading a parameter from a form representing a number, you will need to convert it from string. The `Number` function is one simple way of doing this:\n\n~~~\n    const newSong = {\n      id: uuid(),\n      title: request.body.title,\n      artist: request.body.artist,\n      duration: Number(request.body.duration),\n    };\n~~~\n\n## Exercise 3: Active Duration\n\nThe durations in each playlist are just constants stored in the database. Currently, if you add a new playlist + songs, then the duration in the playlist will be undefined.\n\nChange this now, such that when you add a song to a playlist the duration displayed on the dashboard for each playlist will be the actual sum of the donations for all songs in the playlist.\n\nHINT: One way of dong this is to update the `addSong()` method in the `playlist-store` object:\n\n~~~\n  addSong(id, song) {\n    const playlist = this.getPlaylist(id);\n    playlist.songs.push(song);\n\n    let duration = 0;\n    // Iterate over the playlist.songs array, and accumulate the duration of each\n    // song into the duration local variable.\n    // ...\n    // ...\n\n    // Now store the duration in playlist.store\n    // ...\n    \n    this.store.save();\n  },\n~~~",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/unit/book-a-gomix-playlist-3/Exercises"
                }
              ]
            }
          ]
        },
        {
          "title": "05: Models ",
          "type": "panelvideo",
          "summary": "05: Models",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/panelvideo/",
          "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/panelvideo/_8Ycwb1YRNI",
          "id": "panelvideo",
          "route": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-05-app-models/panelvideo/_8Ycwb1YRNI",
          "hide": false
        }
      ]
    },
    {
      "title": "6: Sessions ",
      "type": "topic",
      "summary": "In order to implement user account management, sessions provide a mechanism for identifying specific users",
      "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-0/talk-1-sessions-intro/c-sessions.png",
      "id": "topic-06-sessions",
      "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions",
      "hide": true,
      "los": [
        {
          "title": "Reintroducing Sessions ",
          "type": "unit",
          "summary": "Reintroducing Sessions",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-0/talk-1-sessions-intro/c-sessions.png",
          "id": "unit-0",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/",
          "hide": false,
          "los": [
            {
              "title": " Sessions Introduction ",
              "type": "talk",
              "summary": "Common techniques for implementing sessions.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-0/talk-1-sessions-intro/c-sessions.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-0/talk-1-sessions-intro/4jrI8mKw3S8",
              "id": "talk-1-sessions-intro",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-0/talk-1-sessions-intro/c-sessions.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-0/talk-1-sessions-intro/c-sessions.pdf"
            },
            {
              "title": "Using Sessions ",
              "type": "talk",
              "summary": "Refactor the application to support sessions",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-0/talk-2-using-sessions/using-sessions.gif",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-0/talk-2-using-sessions/93VFBlgSZlY",
              "id": "talk-2-using-sessions",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-0/talk-2-using-sessions/using-sessions.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-0/talk-2-using-sessions/using-sessions.pdf"
            }
          ]
        },
        {
          "title": "Implementing Sessions ",
          "type": "unit",
          "summary": "Implementing Sessions",
          "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/talk-3-sessions-ux/sessions-ux.jpg",
          "id": "unit-1",
          "route": "#topic/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/",
          "hide": false,
          "los": [
            {
              "title": "Sessions UX ",
              "type": "talk",
              "summary": "New forms needed to enable the user to signup / login",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/talk-3-sessions-ux/sessions-ux.jpg",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/talk-3-sessions-ux/5JtT1Ty_Lyw",
              "id": "talk-3-sessions-ux",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/talk-3-sessions-ux/sessions-ux.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/talk-3-sessions-ux/sessions-ux.pdf"
            },
            {
              "title": "Creating Sessions ",
              "type": "talk",
              "summary": "The API to create, access and destroy sessions.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/talk-4-creating-sessions/creating-sessions.png",
              "video": "#video/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/talk-4-creating-sessions/LnOif8077bE",
              "id": "talk-4-creating-sessions",
              "route": "#talk/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/talk-4-creating-sessions/creating-sessions.pdf",
              "hide": false,
              "pdf": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/talk-4-creating-sessions/creating-sessions.pdf"
            },
            {
              "title": "Lab-7 Playlist 4",
              "type": "lab",
              "summary": "Introduce Sessions onto the Playlist application, enabling user accounts and cookie-based authentication.",
              "img": "https://wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions/img/main.png",
              "id": "book-b-gomix-sessions",
              "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions",
              "hide": false,
              "los": [
                {
                  "title": "# Objectives",
                  "shortTitle": "Lab-7 Playlist 4",
                  "contentMd": "# Objectives\n\nIntroduce Sessions onto the Playlist application, enabling user accounts and cookie-based authentication.\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions/Lab-7 Playlist 4"
                },
                {
                  "title": "# Exercises Solutions",
                  "shortTitle": "Exercise Solutions",
                  "contentMd": "# Exercises Solutions\n\nThis lab requires that the `playlist-3` lab be completed. If you have lost your solution, create a new project in Glitch by cloning this repo:\n\n- <https://github.com/wit-hdip-comp-sci-2019/playlist-3>\n\nInstructions on how to do this are [here](https://tutors.design/lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com/topic-03-web-apps/unit-2/book-a-glitch-playlist-1/01). Remember to use the url above.\n\n## Exercise 1: Display Durations\n\nMake sure the duration of each song and playlist is visible on the UX\n\n### views/partials/listsongs.hbs\n\n~~~\n<table class=\"ui table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n      <th>Duration</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#each playlist.songs}}\n      <tr>\n        <td>\n          {{title}}\n        </td>\n        <td>\n          {{artist}}\n        </td>\n        <td>\n          {{duration}}\n        </td>\n        <td>\n          <a href=\"/playlist/{{../playlist.id}}/deletesong/{{id}}\" class=\"ui icon button\">\n            <i class=\"icon trash\"></i>\n          </a>\n        </td>\n      </tr>\n    {{/each}}\n  </tbody>\n</table>\n~~~\n\n### views/partials/listplaylists.hbs\n\n~~~\n{{#each playlists}}\n  <section class=\"ui stacked segment\">\n    <h2 class=\"ui header\">\n      {{title}}\n    </h2>\n    <p> Total Duration: {{duration}} </p>\n    <a href=\"/playlist/{{id}}\" class=\"ui icon button\">\n      <i class=\"icon folder open\"></i>\n    </a>\n    <a href=\"/dashboard/deleteplaylist/{{id}}\" class=\"ui icon button\">\n      <i class=\"icon trash\"></i>\n    </a>\n  </section>\n{{/each}}\n\n~~~\n\n## Exercise 2: Add Song Duration\n\nModify the add song form to accept a song duration as well as title and artist:\n\n## views/partials/addsong.hbs\n\n~~~\n<form class=\"ui stacked segment form\" action=\"/playlist/{{playlist.id}}/addsong\" method=\"POST\">\n  <div class=\"two fields\">\n    <div class=\"field\">\n      <label>Title</label>\n      <input placeholder=\"Title\" type=\"text\" name=\"title\">\n    </div>\n    <div class=\"field\">\n      <label>Artist</label>\n      <input placeholder=\"Artist\" type=\"text\" name=\"artist\">\n    </div>\n    <div class=\"field\">\n      <label>Duration</label>\n      <input placeholder=\"00\" type=\"number\" name=\"duration\">\n    </div>\n  </div>\n  <button class=\"ui blue submit button\">Add Song</button>\n</form>\n~~~\n\n## controllers/playlist.js\n\nIn the playlist addSong method, include the the duration field, reading it from the form:\n\n~~~\n    const newSong = {\n      id: uuid(),\n      title: request.body.title,\n      artist: request.body.artist,\n      duration: Number(request.body.duration),\n    };\n~~~\n\nThis is the complete addSong method:\n\n~~~\n  addSong(request, response) {\n    const playlistId = request.params.id;\n    const playlist = playlistStore.getPlaylist(playlistId);\n    const newSong = {\n      id: uuid(),\n      title: request.body.title,\n      artist: request.body.artist,\n      duration: Number(request.body.duration),\n    };\n    logger.debug(\"New Song = \", newSong);\n    playlistStore.addSong(playlistId, newSong);\n    response.redirect(\"/playlist/\" + playlistId);\n  }\n~~~\n\nVerify that you can add songs with duration now.\n\n## Exercise 3: Active Duration\n\nThe durations in each playlist are just constants stored in the database. Currently, if you add a new playlist + songs, then the duration in the playlist will be undefined.\n\nChange this now, such that when you add a song to a playlist the duration displayed on the dashboard for each playlist will be the actual sum of the donations for all songs in the playlist.\n\n\n## models/playlist-store.json\n~~~\n...\n  addSong(id, song) {\n    const playlist = this.getPlaylist(id);\n    playlist.songs.push(song);\n\n    let duration = 0;\n    for (let i = 0; i < playlist.songs.length; i++) {\n      duration += playlist.songs[i].duration;\n    }\n\n    playlist.duration = duration;\n    this.store.save();\n  },\n...  \n~~~\n\nNow see if the durations are an accurate summary of all the song's duration.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions/Exercise Solutions"
                },
                {
                  "title": "# Playlist Model",
                  "shortTitle": "02",
                  "contentMd": "# Playlist Model\n\nIf your project has any playlists in the json store, delete them now. Your store should look like this:\n\n## models/playlist-store.json\n\n~~~\n{\n  \"playlistCollection\": [\n  ]\n}\n~~~\n\nYou can do this via the UX, or you can just delete them from playlist-store.json directly.\n\nThis has completely emptied our application of data. We are doing this as we are about to make some changes to how the store is represented.\n\nWe need a new method in the playlist-store module, which will retrieve a playlist based on a specific user id.\n\n## models/playlist-store.js\n\n~~~\n...\n  getUserPlaylists(userid) {\n    return this.store.findBy(this.collection, { userid: userid });\n  },\n...\n~~~\n\nThis new method takes a userid, and will only fetch playlists belonging to the user with the specific id. We have'nt introduced the User model yet - nor are we storing playlists with such an id. We will make these changes in the next steps...",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions/02"
                },
                {
                  "title": "# UserStore",
                  "shortTitle": "03",
                  "contentMd": "# UserStore\n\nNow we can introduce a new module to manage a user store:\n\n## models/user-store.js\n\n~~~\n'use strict';\n\nconst _ = require('lodash');\nconst JsonStore = require('./json-store');\n\nconst userStore = {\n\n  store: new JsonStore('./models/user-store.json', { users: [] }),\n  collection: 'users',\n\n  getAllUsers() {\n    return this.store.findAll(this.collection);\n  },\n\n  addUser(user) {\n    this.store.add(this.collection, user);\n  },\n\n  getUserById(id) {\n    return this.store.findOneBy(this.collection, { id: id });\n  },\n\n  getUserByEmail(email) {\n    return this.store.findOneBy(this.collection, { email: email });\n  },\n};\n\nmodule.exports = userStore;\n~~~\n\nWe can manually create some user objects in a new user-store.json file:\n\n## models/user-store.json\n\n~~~\n{\n  \"users\": [\n    {\n      \"firstName\": \"homer\",\n      \"lastName\": \"simpson\",\n      \"email\": \"homer@simpson.com\",\n      \"password\": \"secret\",\n      \"id\": \"3ad52697-6d98-4d80-8273-084de55a86c0\"\n    },\n    {\n      \"firstName\": \"marge\",\n      \"lastName\": \"simpson\",\n      \"email\": \"marge@simpson.com\",\n      \"password\": \"secret\",\n      \"id\": \"2b6f0989-7b7f-4a38-ad26-aa06b922d751\"\n    }\n  ]\n}\n~~~\n\nIn the above we are pre-loading two users for test purposes. We will use these user objects in the next steps...",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions/03"
                },
                {
                  "title": "# Accounts views",
                  "shortTitle": "04",
                  "contentMd": "# Accounts views\n\nWe need a suite of new views to support signup / login. \n\nFirst of all a new landing page - inviting the visitors to either sign up or log in:\n\n## views/index.hbs\n\n~~~\n{{> welcomemenu }}\n\n<section class=\"ui center aligned middle aligned segment\">\n  <p> Sign up or Log in... </p>\n</section>\n~~~\n\nThis view requires the following new menu partial:\n\n## views/partials/welcomemenu.hbs\n\n~~~\n<nav class=\"ui menu\">\n  <header class=\"ui header item\"> <a href=\"/\"> Playlist 4 </a></header>\n  <div class=\"right menu\">\n    <a id=\"signup\" class=\"item\" href=\"/signup\"> Signup  </a>\n    <a id=\"login\" class=\"item\" href=\"/login\">  Login   </a>\n  </div>\n</nav>\n\n<script>\n  $(\"#{{id}}\").addClass(\"active item\");\n</script>\n~~~\n\nThis is a new login view:\n\n## views/login.hbs\n\n~~~\n{{> welcomemenu id='login' }}\n\n<form class=\"ui stacked segment form\" action=\"/authenticate\" method=\"POST\">\n  <h3 class=\"ui header\">Log-in</h3>\n  <div class=\"field\">\n    <label>Email</label> <input placeholder=\"Email\" name=\"email\">\n  </div>\n  <div class=\"field\">\n    <label>Password</label> <input type=\"password\"  name=\"password\">\n  </div>\n  <button class=\"ui blue submit button\">Login</button>\n</form>\n~~~\n\n... and this is a sign up view:\n\n## views/signup.hbs\n\n~~~\n{{> welcomemenu id=\"signup\"}}\n\n<form class=\"ui stacked segment form\" action=\"/register\" method=\"POST\">\n  <h3 class=\"ui header\">Register</h3>\n  <div class=\"two fields\">\n    <div class=\"field\">\n      <label>First Name</label>\n      <input placeholder=\"First Name\" type=\"text\"  name=\"firstName\">\n    </div>\n    <div class=\"field\">\n      <label>Last Name</label>\n      <input placeholder=\"Last Name\" type=\"text\"  name=\"lastName\">\n    </div>\n  </div>\n  <div class=\"field\">\n    <label>Email</label>\n    <input placeholder=\"Email\" type=\"text\" name=\"email\">\n  </div>\n  <div class=\"field\">\n    <label>Password</label>\n    <input type=\"password\" name=\"password\">\n  </div>\n  <button class=\"ui blue submit button\">Submit</button>\n</form>\n~~~\n\nWe will adjust the controllers in the next steps to use these views...\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions/04"
                },
                {
                  "title": "# Accounts controller",
                  "shortTitle": "05",
                  "contentMd": "# Accounts controller\n\nThis is a new controller to support these views:\n\n## controllers/accounts\n\n~~~\n'use strict';\n\nconst userstore = require('../models/user-store');\nconst logger = require('../utils/logger');\nconst uuid = require('uuid');\n\nconst accounts = {\n\n  index(request, response) {\n    const viewData = {\n      title: 'Login or Signup',\n    };\n    response.render('index', viewData);\n  },\n\n  login(request, response) {\n    const viewData = {\n      title: 'Login to the Service',\n    };\n    response.render('login', viewData);\n  },\n\n  logout(request, response) {\n    response.cookie('playlist', '');\n    response.redirect('/');\n  },\n\n  signup(request, response) {\n    const viewData = {\n      title: 'Login to the Service',\n    };\n    response.render('signup', viewData);\n  },\n\n  register(request, response) {\n    const user = request.body;\n    user.id = uuid();\n    userstore.addUser(user);\n    logger.info(`registering ${user.email}`);\n    response.redirect('/');\n  },\n\n  authenticate(request, response) {\n    const user = userstore.getUserByEmail(request.body.email);\n    if (user) {\n      response.cookie('playlist', user.email);\n      logger.info(`logging in ${user.email}`);\n      response.redirect('/dashboard');\n    } else {\n      response.redirect('/login');\n    }\n  },\n\n  getCurrentUser(request) {\n    const userEmail = request.cookies.playlist;\n    return userstore.getUserByEmail(userEmail);\n  },\n};\n\nmodule.exports = accounts;\n~~~\n\nThis will enable new users to sign up and existing users to log in. It makes use of\n\n- the views introduced in the last step\n- the user-store module\n- the cookie mechanism \n\nto create and manage user interaction with the application.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions/05"
                },
                {
                  "title": "# Routes",
                  "shortTitle": "06",
                  "contentMd": "# Routes\n\nTo support the users, we need a new set of routes:\n\n## routes.js\n\nFirst, import the accounts module towards the top if the routes file:\n\n~~~\n...\nconst accounts = require('./controllers/accounts.js');\n...\n~~~\n\nThen we can append these new routes:\n~~~\n...\nrouter.get('/', accounts.index);\nrouter.get('/login', accounts.login);\nrouter.get('/signup', accounts.signup);\nrouter.get('/logout', accounts.logout);\nrouter.post('/register', accounts.register);\nrouter.post('/authenticate', accounts.authenticate);\n...\n~~~\n\nWe also need to remove this existing route, as we are replacing it:\n\n~~~\nrouter.get(\"/\", dashboard.index);\n~~~\n\nThis is the complete revised routes.js\n\n~~~\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\n\nconst dashboard = require('./controllers/dashboard.js');\nconst about = require('./controllers/about.js');\nconst playlist = require('./controllers/playlist.js');\nconst accounts = require('./controllers/accounts.js');\n\nrouter.get('/', accounts.index);\nrouter.get('/login', accounts.login);\nrouter.get('/signup', accounts.signup);\nrouter.get('/logout', accounts.logout);\nrouter.post('/register', accounts.register);\nrouter.post('/authenticate', accounts.authenticate);\n\nrouter.get('/dashboard', dashboard.index);\nrouter.get('/dashboard/deleteplaylist/:id', dashboard.deletePlaylist);\nrouter.post('/dashboard/addplaylist', dashboard.addPlaylist);\n\nrouter.get('/about', about.index);\nrouter.get('/playlist/:id', playlist.index);\nrouter.get('/playlist/:id/deletesong/:songid', playlist.deleteSong);\nrouter.post('/playlist/:id/addsong', playlist.addSong);\n\nmodule.exports = router;\n~~~\n\nFinally, in order to support the logout feature, we need to add a new option to the main menu:\n\n## views/partials/menu.hbs\n\n~~~\n<nav class=\"ui menu\">\n  <header class=\"ui header item\"> <a href=\"/\"> Playlist 4 </a></header>\n  <div class=\"right menu\">\n    <a id=\"dashboard\" class=\"item\" href=\"/dashboard\"> Dashboard  </a>\n    <a id=\"about\" class=\"item\" href=\"/about\"> About </a>\n    <a id=\"logout\" class=\"item\" href=\"/logout\"> Logout </a>\n  </div>\n</nav>\n\n<script>\n  $(\"#{{id}}\").addClass(\"active item\");\n</script>\n~~~\n\nThe application should be running now. You should see these new views:\n\n### A new landing page\n\n![](img/02.png)\n\n### Signup\n\n![](img/01.png)\n\n### login\n\n![](img/03.png)\n\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions/06"
                },
                {
                  "title": "# Dashboard",
                  "shortTitle": "07",
                  "contentMd": "# Dashboard\n\nTry the following now:\n\n- Log in as 'homer@simpson', 'secret'. \n- Add a playlist called 'Homers First List'.\n- logout\n- Log in as 'marge@simpson', 'secret'. \n\nNotice that we are seeing Homers test playlist even when we log in as marge? The playlist-store.json may look like this:\n\n~~~\n{\n  \"playlistCollection\": [\n    {\n      \"id\": \"4a1ea4ec-303e-4b13-bd98-a6b04877e093\",\n      \"title\": \"Homers First List\",\n      \"songs\": []\n    }\n  ]\n}\n~~~\n\n(Glitch will probably not show the above - as the editor currently doesnt render the files accurately if they have been modified by another process. You should see the above, though, if you are running the app in Webstorm.)\n\nWe should only present the users with their own playlist - Marge should NOT be able to see Homers' list (as is currently the case).\n\nHere is how we do it - all changes to the dashboard module:\n\n## controller/dashboard.js\n\nIn the top of the module, import the new accounts module:\n\n~~~\n...\nconst accounts = require ('./accounts.js');\n...\n~~~\n\nRevised addPlaylist action:\n\n~~~javascript\n...\n  addPlaylist(request, response) {\n    const loggedInUser = accounts.getCurrentUser(request);\n    const newPlayList = {\n      id: uuid(),\n      userid: loggedInUser.id,\n      title: request.body.title,\n      songs: [],\n    };\n    logger.debug('Creating a new Playlist', newPlayList);\n    playlistStore.addPlaylist(newPlayList);\n    response.redirect('/dashboard');\n  },\n...\n~~~\n\nNotice we find out who the logged in user is and then make sure that users ID is stored with the playlist.\n\nRevised index action:\n\n~~~javascript\n...\n  index(request, response) {\n    logger.info('dashboard rendering');\n    const loggedInUser = accounts.getCurrentUser(request);\n    const viewData = {\n      title: 'Playlist Dashboard',\n      playlists: playlistStore.getUserPlaylists(loggedInUser.id),\n    };\n    logger.info('about to render', playlistStore.getAllPlaylists());\n    response.render('dashboard', viewData);\n  },\n...\n~~~\n\nNotice in the above we are first finding out how the currently logged in user is - and then we are using that users id to get the correct playlists.\n\nLog in again as marge and homer in turn, creating a single playlist (use a name you will remember). Make sure that the appropriate playlist appears in each users dashboard.\n\n\n## The Stores\n\nLooking at the playlist-store.json - it might (eventually when loaded) look something like this:\n\n~~~\n{\n  \"playlistCollection\": [\n    {\n      \"id\": \"1e6ed5a0-28fe-4527-8ce8-6cb5c800b5be\",\n      \"userid\": \"2b6f0989-7b7f-4a38-ad26-aa06b922d751\",\n      \"title\": \"marges playlist\",\n      \"songs\": []\n    },\n    {\n      \"id\": \"07dd66fe-9f8f-456c-944d-48330bde4610\",\n      \"userid\": \"3ad52697-6d98-4d80-8273-084de55a86c0\",\n      \"title\": \"homers playlist\",\n      \"songs\": []\n    }\n  ]\n}\n~~~\n\nEach playlist has and id + a userid, which identifies the user how 'owns' the playlist.\n\n\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions/07"
                },
                {
                  "title": "# Exercise",
                  "shortTitle": "Exercises",
                  "contentMd": "# Exercise\n\nThis is the completed archive at this stage:\n\n- <https://github.com/wit-hdip-comp-sci-2019/playlist-4>\n\n\n## Exercise 1\n\nTest the application more comprehensively - signing up a range of users, and creating playlists. Make sure the users only see the playlists they have created.\n\n\n## Exercise 2\n\nLook at the `authenticate` method again:\n\n~~~\n  authenticate(request, response) {\n    const user = userstore.getUserByEmail(request.body.email);\n    if (user) {\n      response.cookie('playlist', user.email);\n      logger.info(`logging in ${user.email}`);\n      response.redirect('/dashboard');\n    } else {\n      response.redirect('/login');\n    }\n  },\n~~~\n\nCan you see anything not quite right about it? \n\nHint: what happens if incorrect password entered? Try this now.\n\nSee if you can fix this problem - i.e. only allow user to log in if they provide correct password.\n",
                  "route": "#lab/wit-hdip-comp-sci-2019-ict-skills-1.netlify.com//topic-06-sessions/unit-1/book-b-gomix-sessions/Exercises"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
